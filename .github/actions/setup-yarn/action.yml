name: 'Setup yarn'
description: 'Yarn setup and install dependencies'
inputs:
  RUNS_ON_S3_BUCKET_CACHE:
    description: ''
    required: true
  YARN_NPM_REGISTRY_SERVER:
    description: ''
    required: false
    default: ''
  AWS_ACCOUNT_ID:
    description: ''
    required: false
    default: '821090935708'
  AWS_REGION:
    description: ''
    required: false
    default: 'eu-west-1'
  working-directory:
    description: 'Directory to run the action in'
    required: false
    default: '.'

runs:
  using: 'composite'
  steps:
    - name: Corepack
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        corepack enable

    - name: Check node version
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        set -euo pipefail
        node -v
        yarn --version
        ls -l "$(which node)"

    - name: Setup NPM pull-through
      shell: bash
      run: |
        inital_registry_server=$(yarn config get npmRegistryServer)
        echo "inital_registry_server $inital_registry_server"

        # aws sts get-caller-identity
        ble=$(aws sts get-caller-identity)
        echo "AWS call identity $ble"

        yarn config set npmRegistryServer "${{ inputs.YARN_NPM_REGISTRY_SERVER }}"

        CODEARTIFACT_AUTH_TOKEN="$(aws codeartifact get-authorization-token --domain npm-upstream \
          --domain-owner ${{ inputs.AWS_ACCOUNT_ID }} --region ${{ inputs.AWS_REGION }} \
          --query authorizationToken --output text)"

        export CODEARTIFACT_AUTH_TOKEN="$CODEARTIFACT_AUTH_TOKEN"

        [ "${CODEARTIFACT_AUTH_TOKEN}" != "" ] && echo "We have token" || echo "Token missing"

        yarn config set 'npmRegistries["${{ inputs.YARN_NPM_REGISTRY_SERVER }}"].npmAuthToken' "${CODEARTIFACT_AUTH_TOKEN}"
        yarn config set 'npmRegistries["${{ inputs.YARN_NPM_REGISTRY_SERVER }}"].npmAlwaysAuth' "true"

        val=$(yarn config get 'npmRegistries["${{ inputs.YARN_NPM_REGISTRY_SERVER }}"]')
        echo "Value from yarn config get npmRegistries $val"

    - name: Set cache key
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      id: set-cache-key
      run: |
        echo "CACHE_KEY=${{ runner.os }}-deps-cypress-${{ hashFiles('yarn.lock') }}-1" >> $GITHUB_OUTPUT

    - name: Get Yarn Cache Directory Path
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      id: yarn-cache-dir-path
      run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

    - name: Restore Dependencies Cache
      uses: runs-on/cache/restore@v4
      id: restore-cache
      with:
        path: |
          ${{ steps.yarn-cache-dir-path.outputs.dir }}
          ${{ env.CYPRESS_CACHE_FOLDER }}
        key: ${{ steps.set-cache-key.outputs.CACHE_KEY }}
      env:
        RUNS_ON_S3_BUCKET_CACHE: ${{ inputs.RUNS_ON_S3_BUCKET_CACHE }}
        CYPRESS_CACHE_FOLDER: ${{ github.workspace }}/.cypress-cache

    - name: Yarn install
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        yarn install --immutable

    - name: Cache Dependencies
      uses: runs-on/cache/save@v4
      if: steps.restore-cache.outputs.cache-hit != 'true'
      with:
        path: |
          ${{ steps.yarn-cache-dir-path.outputs.dir }}
          ${{ env.CYPRESS_CACHE_FOLDER }}
        key: ${{ steps.set-cache-key.outputs.CACHE_KEY }}
      env:
        RUNS_ON_S3_BUCKET_CACHE: ${{ inputs.RUNS_ON_S3_BUCKET_CACHE }}
        CYPRESS_CACHE_FOLDER: ${{ github.workspace }}/.cypress-cache
