name: 'Load Dependencies'
description: 'Prerequisite is that the prepare step has already been run'

inputs:
  working-directory:
    description: 'Directory to run the action in'
    required: false
    default: './'
  cache-path:
    description: 'Cache path'
    required: false
    default: ${{ runner.temp }}
  aws-region:
    description: 'AWS region to use'
    required: false
    default: 'eu-west-1'

runs:
  using: 'composite'
  steps:
    - name: Set RUNS_ON_S3_BUCKET_CACHE
      shell: bash
      if: ${{ !github.event.localrun && env.RUNS_ON_BUCKET_NAME }}
      run: echo "RUNS_ON_S3_BUCKET_CACHE=${{ env.RUNS_ON_BUCKET_NAME }}" >> $GITHUB_ENV

    - name: Set env
      shell: bash
      run: |
        export GENERATED_FILES_PATH=${{ inputs.cache-path }}/${{ env.GENERATED_FILES }}
        echo "GENERATED_FILES_PATH=$GENERATED_FILES_PATH" >> "$GITHUB_ENV"

    - name: INFO
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        echo "generated files: ${{ env.GENERATED_FILES_PATH }}"

    - name: Generate hash for generated files list
      id: generate-files-hash
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        node ./scripts/ci/generate-files.mjs /dev/null --skip-codegen

    - name: Cache generated files
      uses: runs-on/cache@v4
      id: restore-codegen-cache
      with:
        path: |
          ${{ env.GENERATED_FILES_PATH }}
        key: generated-files-${{ hashFiles('generated_files_list.txt') }}
      env:
        AWS_REGION: ${{ inputs.aws-region }}

    - name: Prepare generated files
      if: steps.restore-codegen-cache.outputs.cache-hit != 'true'
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        node ./scripts/ci/generate-files.mjs ${{ env.GENERATED_FILES_PATH }}

    - name: Extract generated files
      if: steps.restore-codegen-cache.outputs.cache-hit == 'true'
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        echo "::group::Extract generated files"
        tar -xzvf ${{ env.GENERATED_FILES_PATH }}
        echo "::endgroup::"
