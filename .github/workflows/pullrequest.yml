name: Monorepo pipeline - pull request

on:
  pull_request: {}
  workflow_dispatch: {}

defaults:
  run:
    shell: bash

concurrency:
  # See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-a-fallback-value
  group: pullrequest-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  COMPOSE_HTTP_TIMEOUT: 180
  SKIP_GENERATED_CACHE: ${{ contains(github.event.pull_request.labels.*.name, 'skip-generated-cache') }}
  NX_AFFECTED_ALL: ${{ contains(github.event.pull_request.labels.*.name, 'nx-affected-all') }}
  NX_SKIP_NX_CACHE: ${{ contains(github.event.pull_request.labels.*.name, 'skip-nx-cache') }}
  DISABLE_CHUNKS: 'true'
  DISABLE_GROUPING: 'false'
  DISABLE_PROBLEMATIC: 'false'
  CHUNK_SIZE: '8'
  MAX_JOBS: '3'
  NX_PARALLEL: '2'
  NX_MAX_PARALLEL: '4'
  NX_TASKS_RUNNER: ci
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  RUNS_ON_BUCKET_NAME: ${{ vars.RUNS_ON_BUCKET_NAME }}
  AWS_REGION: eu-west-1
  GENERATED_FILES: ${{ github.sha }}.tar.gz
  AFFECTED_ALL: ${{ secrets.AFFECTED_ALL }}
  SERVERSIDE_FEATURES_ON: ''
  DOCKER_REGISTRY: 821090935708.dkr.ecr.eu-west-1.amazonaws.com
  DOCKER_BASE_IMAGE_REGISTRY: 821090935708.dkr.ecr.eu-west-1.amazonaws.com/ecr-public
  CI_DEBUG: ${{ contains(github.event.pull_request.labels.*.name, 'ci debug') }}
  SKIP_TESTS: ${{ contains(github.event.pull_request.labels.*.name, 'test nothing') }}
  DEPLOY_FEATURE: ${{ contains(github.event.pull_request.labels.*.name, 'deploy-feature') }}
  YARN_ENABLE_HARDENED_MODE: '0'

jobs:
  prepare:
    uses: ./.github/workflows/install.yml
    secrets: inherit
    with:
      main_branch: ${{ github.base_ref }}

  tests:
    needs:
      - prepare
    if: ${{ needs.prepare.outputs.TEST_CHUNKS && needs.prepare.outputs.DEPLOY_FEATURE == 'false' }}
    runs-on: arc-shared
    timeout-minutes: 45
    env:
      AFFECTED_PROJECTS: ${{ matrix.projects }}
      NX_BASE: ${{ needs.prepare.outputs.NX_BASE }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.TEST_CHUNKS) }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Setup yarn
        uses: ./.github/actions/setup-yarn
        with:
          RUNS_ON_S3_BUCKET_CACHE: ${{ secrets.S3_DOCKER_CACHE_BUCKET }}
          YARN_NPM_REGISTRY_SERVER: ${{ secrets.YARN_NPM_REGISTRY_SERVER }}

      - name: load-deps
        uses: ./.github/actions/load-deps

      - name: Run unit tests
        uses: ./.github/actions/unit-test
        with:
          dd-api-key: '${{ secrets.DD_API_KEY }}'
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          docker-registry: 821090935708.dkr.ecr.eu-west-1.amazonaws.com/

  unicorn-tests:
    name: All projects have some tests
    needs:
      - prepare
    if: ${{ needs.prepare.outputs.TEST_CHUNKS && needs.prepare.outputs.DEPLOY_FEATURE == 'false' && needs.prepare.outputs.is-unicorn == 'true' }}
    runs-on: arc-shared
    env:
      CHUNKS: ${{ needs.prepare.outputs.TEST_CHUNKS }}
      NX_BASE: ${{ needs.prepare.outputs.NX_BASE }}
      NX_HEAD: ${{ needs.prepare.outputs.NX_HEAD }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          # Need full repo for Nx to find the commits at NX_* below
          fetch-depth: 0

      - name: Setup yarn
        uses: ./.github/actions/setup-yarn
        with:
          RUNS_ON_S3_BUCKET_CACHE: ${{ secrets.S3_DOCKER_CACHE_BUCKET }}
          YARN_NPM_REGISTRY_SERVER: ${{ secrets.YARN_NPM_REGISTRY_SERVER }}

      - name: load-deps
        uses: ./.github/actions/load-deps

      - name: Find unicorn projects
        id: unicorn
        run: |
          unicorns=$(node scripts/ci/unicorn-utils.mjs show-unicorns --json)
          jq -ncr --argjson chunks "$CHUNKS" --argjson unicorns "$unicorns" '
            [
                $chunks.projects
              | .[]
              | select( . | IN( $unicorns | .[] ) )
            ]
            | "projects=\(. | join(","))"
          ' | tee -a "$GITHUB_OUTPUT"

      - name: Verify that projects have some tests
        if: ${{ steps.unicorn.outputs.projects != '' }}
        env:
          projects: ${{ steps.unicorn.outputs.projects }}
        run: |
          # Get list of tests, with `<project-name>: ` prefixed (stream style, without cache), grouping by unique prefixes (sorted)
          yarn nx run-many -t test --skip-nx-cache --output-style=stream --projects="${projects}" --parallel --verbose -- --listTests |
            grep -P "^(${projects//,/|}): " | cut -d':' -f1 | sort -u > /tmp/projects-with-tests
          # Get affected projects sorted
          echo -e "${projects}" | sed 's/,/\n/g' | sort -u > /tmp/projects-all
          if ! d=$(diff /tmp/projects-with-tests /tmp/projects-all); then
            echo "These projects don't have any tests:"
            echo "${d}"
            exit 1
          fi
          echo "All projects ($projects) have tests."

  e2e:
    uses: ./.github/workflows/e2e.yml
    needs:
      - prepare
    if: ${{ needs.prepare.outputs.E2E_CHUNKS && needs.prepare.outputs.DEPLOY_FEATURE == 'false' }}
    secrets: inherit
    with:
      e2e_build_id: '${{ needs.prepare.outputs.E2E_BUILD_ID }}-${{ github.run_attempt }}'
      nx_base: ${{ needs.prepare.outputs.NX_BASE }}
      nx_head: ${{ needs.prepare.outputs.NX_HEAD }}
      affected_projects: ${{ matrix.projects }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.E2E_CHUNKS) }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Setup yarn
        uses: ./.github/actions/setup-yarn
        with:
          RUNS_ON_S3_BUCKET_CACHE: ${{ secrets.S3_DOCKER_CACHE_BUCKET }}
          YARN_NPM_REGISTRY_SERVER: ${{ secrets.YARN_NPM_REGISTRY_SERVER }}

      - name: load-deps
        uses: ./.github/actions/load-deps

      - name: Running e2e tests
        run: yarn nx run-many --target=e2e --projects="${AFFECTED_PROJECTS}" --parallel 3

  linting-workspace:
    needs:
      - prepare
    runs-on: arc-shared
    timeout-minutes: 15
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Setup yarn
        uses: ./.github/actions/setup-yarn
        with:
          RUNS_ON_S3_BUCKET_CACHE: ${{ secrets.S3_DOCKER_CACHE_BUCKET }}
          YARN_NPM_REGISTRY_SERVER: ${{ secrets.YARN_NPM_REGISTRY_SERVER }}

      - name: load-deps
        uses: ./.github/actions/load-deps

      - name: Linting workspace
        run: ./scripts/ci/20_lint-workspace.sh

  run-shellcheck:
    needs:
      - prepare
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: reviewdog/action-shellcheck@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-review
          fail_level: info
          exclude: >-
            */node_modules/*

  formatting:
    needs:
      - prepare
    runs-on: arc-shared
    timeout-minutes: 15
    env:
      NX_BASE: ${{ needs.prepare.outputs.NX_BASE }}
    steps:
      - uses: actions/checkout@v4
        if: ${{ github.event_name == 'pull_request' }}
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          persist-credentials: false
          # Need full repo for Nx to find the commits at NX_*
          fetch-depth: 0

      - name: Setup yarn
        uses: ./.github/actions/setup-yarn
        with:
          RUNS_ON_S3_BUCKET_CACHE: ${{ secrets.S3_DOCKER_CACHE_BUCKET }}
          YARN_NPM_REGISTRY_SERVER: ${{ secrets.YARN_NPM_REGISTRY_SERVER }}

      - name: load-deps
        uses: ./.github/actions/load-deps

      - name: NX format:write
        env:
          DIRTYBOT_KEY: ${{ secrets.ISLAND_IS_SSH_KEY }}
          DIRTYBOT_APP_ID: ${{ secrets.ISLAND_IS_APP_KEY }}
        run: |
          yarn nx format:write
          node scripts/ci/docker/git-check-dirty.mjs "." "format" "dirtybot"

      # - name: NX format:write
      #   if: ${{ github.event_name == 'pull_request' }}
      #   run: |
      # TODO: If this step will be commented back in then it needs to take into account
      #       to exclude formatting on .yarnrc.yml file since we are changing the file in the setup-yarn action.
      #     ./scripts/ci/20_check-formatting.sh "write"
      #     ./infra/scripts/ci/git-check-dirty.sh "/" "nx format:write" "dirtybot"

  lintfix-changed-files:
    name: Lintfix Changed Files
    runs-on: arc-shared
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'dirty bypass') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Need full repo for Nx to find the commits at NX_* below
          fetch-depth: 0
          persist-credentials: false
          # Need ref to know where to push to
          # https://github.com/actions/checkout#push-a-commit-to-a-pr-using-the-built-in-token
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Setup yarn
        uses: ./.github/actions/setup-yarn
        with:
          RUNS_ON_S3_BUCKET_CACHE: ${{ secrets.S3_DOCKER_CACHE_BUCKET }}
          YARN_NPM_REGISTRY_SERVER: ${{ secrets.YARN_NPM_REGISTRY_SERVER }}

      - name: Run lintfix
        id: lintfix
        # NOTE: We want to use the PR base, not last good, since the lint is not part of "good" build
        # and causes unintended lint changes when using a different commit
        run: |
          yarn nx affected -t lint --base="origin/$GITHUB_BASE_REF" --fix

          # We have to exclude the .yarnrc.yml from linting since we are changing the file
          # when the setup-yarn action is run.
          diff_message=$(git diff --base -- ":(exclude).yarnrc.yml")

          if [[ -n "$diff_message" ]]; then
            echo "FILES_CHANGED=true" | tee -a "$GITHUB_OUTPUT"
          fi

      - name: Commit changed files
        if: ${{ steps.lintfix.outputs.FILES_CHANGED == 'true' }}
        env:
          DIRTYBOT_KEY: ${{ secrets.ISLAND_IS_SSH_KEY }}
          DIRTYBOT_APP_ID: ${{ secrets.ISLAND_IS_APP_KEY }}
        run: node scripts/ci/docker/git-check-dirty.mjs "." "lintfix" "dirtybot"

  linting:
    needs:
      - prepare
    runs-on: arc-shared
    timeout-minutes: 35
    if: needs.prepare.outputs.LINT_CHUNKS
    env:
      AFFECTED_PROJECTS: ${{ matrix.projects }}
      NODE_OPTIONS: --max-old-space-size=4096
      NX_BASE: ${{ needs.prepare.outputs.NX_BASE }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.LINT_CHUNKS) }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Setup yarn
        uses: ./.github/actions/setup-yarn
        with:
          RUNS_ON_S3_BUCKET_CACHE: ${{ secrets.S3_DOCKER_CACHE_BUCKET }}
          YARN_NPM_REGISTRY_SERVER: ${{ secrets.YARN_NPM_REGISTRY_SERVER }}

      - name: Create output directory for lint output
        run: |
          mkdir -p dist/
          echo "HEAD_LINT_FILE_PATH=dist/lints-processed-head.txt" >> "$GITHUB_ENV"
          echo "BASE_LINT_FILE_PATH=dist/lints-processed-base.txt" >> "$GITHUB_ENV"

      - name: Lint head
        id: lint-head
        run: |
          ./scripts/ci/lint-and-parse.sh \
            "$AFFECTED_PROJECTS" \
            "$HEAD_LINT_FILE_PATH"
          echo "lints-file=$HEAD_LINT_FILE_PATH" | tee -a "$GITHUB_OUTPUT"

      # Checkout for linting base
      - uses: actions/checkout@v4
        if: ${{ !contains(github.event.pull_request.labels.*.name, 'dirty bypass') }}
        with:
          ref: ${{ github.event.pull_request.base.ref }}
          clean: false

      - name: Lint base
        if: ${{ !contains(github.event.pull_request.labels.*.name, 'dirty bypass') }}
        id: lint-base
        run: |
          ./scripts/ci/lint-and-parse.sh \
            "$AFFECTED_PROJECTS" \
            "$BASE_LINT_FILE_PATH"
          echo "lints-file=$BASE_LINT_FILE_PATH" | tee -a "$GITHUB_OUTPUT"

      - name: No new lints
        id: newlints
        if: ${{ !contains(github.event.pull_request.labels.*.name, 'dirty bypass') }}
        env:
          HEAD_LINT_PROCESSED_FILE: ${{steps.lint-head.outputs.lints-file}}
          BASE_LINT_PROCESSED_FILE: ${{steps.lint-base.outputs.lints-file}}
        run: |
          # compare-lints.sh <BASE_LINT_PROCESSED_FILE> <HEAD_LINT_PROCESSED_FILE>
          ./scripts/ci/compare-lints.sh \
            "$BASE_LINT_PROCESSED_FILE" \
            "$HEAD_LINT_PROCESSED_FILE"

      - name: Checkout back to PR
        uses: actions/checkout@v4
        with:
          clean: false

  try_install:
    needs:
      - prepare
    runs-on: arc-shared
    timeout-minutes: 10
    # Ugly! But I want to get rate limit errors. 
    strategy:
      matrix:
          run_id: [
            1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
            11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
            21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
            31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
            41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
            51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
            61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
            71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
            81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
            91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
            111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
            121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
            131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
            141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
            151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
            161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
            171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
            181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
            191, 192, 193, 194, 195, 196, 197, 198, 199, 200
          ]
    name: try_install-${{ matrix.run_id }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Setup yarn
        uses: ./.github/actions/setup-yarn
        with:
          RUNS_ON_S3_BUCKET_CACHE: ${{ secrets.S3_DOCKER_CACHE_BUCKET }}
          YARN_NPM_REGISTRY_SERVER: ${{ secrets.YARN_NPM_REGISTRY_SERVER }}
      - name: Try install
        run: yarn install --immutable
  build:
    needs:
      - prepare
    runs-on: arc-shared
    timeout-minutes: 35
    env:
      AFFECTED_PROJECTS: ${{ matrix.projects }}
      NX_BASE: ${{ needs.prepare.outputs.NX_BASE }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.BUILD_CHUNKS) }}
    if: ${{ needs.prepare.outputs.BUILD_CHUNKS && needs.prepare.outputs.DEPLOY_FEATURE == 'false' }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Setup yarn
        uses: ./.github/actions/setup-yarn
        with:
          SKIP_CACHE: 'true'
          RUNS_ON_S3_BUCKET_CACHE: ${{ secrets.S3_DOCKER_CACHE_BUCKET }}
          YARN_NPM_REGISTRY_SERVER: ${{ secrets.YARN_NPM_REGISTRY_SERVER }}

      - name: load-deps
        uses: ./.github/actions/load-deps

      - name: Building
        run: ./scripts/ci/run-in-parallel-native.sh build

  success:
    runs-on: arc-shared
    if: ${{ !cancelled() }}
    needs:
      - prepare
      - linting-workspace
      - tests
      - linting
      - run-shellcheck
      - formatting
      - e2e
      - build
      - unicorn-tests
    steps:
      - name: Notify about deploy-feature label
        if: ${{ github.event.pull_request.auto_merge && needs.prepare.outputs.DEPLOY_FEATURE == 'true' }}
        run: |
          echo "- 👉 Remove the \`deploy-feature\` label if you want this PR to be merged automatically" >> "$GITHUB_STEP_SUMMARY"
          exit 1

      - name: Collect
        env:
          NEEDS: ${{ toJSON(needs) }}
        run: |
          # "failed" here is everything that wasn't successful or skipped (e.g. "failuer", "cancelled")
          failed_dependencies=$(jq -nr --argjson needs "$NEEDS" ' $needs | with_entries(select(.value.result != "success" and .value.result != "skipped")) ')
          echo -n "Did any dependency fail? "
          if jq -ne --argjson failures "$failed_dependencies" '$failures | length > 0'; then
            failure_statuses=$(jq -nr --argjson failures "$failed_dependencies" '[ $failures | to_entries | .[] | "\(.key) (\(.value.result))" ] | join(", ")')
            echo "::error title=NEEDS::Some dependencies failed: $failure_statuses"
            exit 1
          fi
          echo "::info title=NEEDS::No failing dependencies 🎉"
          exit 0

      - name: Announce success
        run: echo "Build is successful"
