import { renderEnv } from './render-env'
import { ChartName, Deployments, Charts } from '../uber-charts/all-charts'
import { writeFileSync, mkdirSync, rmSync } from 'fs'
import { Envs } from '../environments'
import { OpsEnv } from '../dsl/types/input-types'
import path from 'path'
import yaml from 'yaml'
import type { ToStringOptions } from 'yaml'

const yamlOptions: ToStringOptions = {
  defaultStringType: 'QUOTE_SINGLE',
  defaultKeyType: 'PLAIN',
  lineWidth: 0,
}
const headerComment = `#####################################################################
#
# Do not edit this file manually, it is automatically generated.
# Run "yarn charts" instead.
#
#####################################################################

`

const relativeChartDir = '../../../charts'
const cleanOrphanDirs = (filePath: string): void => {
  try {
    rmSync(filePath, { recursive: true })
  } catch (error) {
    if (error instanceof Error) {
      console.error(
        `Failed to clean orphan directories at ${filePath}: ${error.message}`,
      )
    }
  }
}
const writeYamlFile = (filePath: string, content: unknown) => {
  const doc = new yaml.Document()
  doc.contents = doc.createNode(content)
  mkdirSync(path.dirname(filePath), { recursive: true })
  writeFileSync(filePath, headerComment + doc.toString(yamlOptions), {
    encoding: 'utf8',
  })
}

const generateChartValues = async () => {
  console.log('Cleaning orphan charts')
  cleanOrphanDirs(path.join(__dirname, relativeChartDir))
  console.log('Gathering charts')
  for (const [name, envs] of Object.entries(Deployments)) {
    for (const [envType, envName] of Object.entries(envs)) {
      console.log(`Processing ${name} ${envName} ${envType}`)
      const renderedYaml = await renderEnv(envType as OpsEnv, name as ChartName)
      const renderedValues = yaml
        .parseDocument(renderedYaml, { schema: 'json' })
        .toJSON()

      // Write umbrella chart values
      writeYamlFile(
        path.join(
          __dirname,
          relativeChartDir,
          name,
          `values.${Envs[envName].type}.yaml`,
        ),
        renderedValues,
      )

      // Write individual service values
      const services = Charts[name as ChartName][envType as OpsEnv]
      for (const service of services) {
        const serviceName = service.name()
        console.log(`Processing ${serviceName} ${envName} ${envType}`)
        if (renderedValues[serviceName]) {
          const serviceValues = {
            global: renderedValues.global,
            name: serviceName,
            ...renderedValues[serviceName],
          }

          writeYamlFile(
            path.join(
              __dirname,
              `${relativeChartDir}/${name}-services`,
              serviceName,
              `values.${Envs[envName].type}.yaml`,
            ),
            serviceValues,
          )
        }
      }
    }
  }
}

generateChartValues().catch(console.error)
