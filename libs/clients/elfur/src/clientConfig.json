{
  "openapi": "3.0.1",
  "info": {
    "title": "Elfur API",
    "description": "<h2>API's to fetch and send data to FJS</h2><h3>Account</h3><p>This is currently not used.</p><h3>Employee</h3><p>Fetch information about employees from Orri.</p><h3>Organization</h3><p>This controller is used to fetch information about organizations. In icelandic 'Stofnanir'.</p><p>Here you can find which Organization Units belong to an organization and get details about an organization.</p><h3>Organization Employee</h3><p>This controller is used to fetch information about employees in organizations or in organization units. In icelandic 'Stofnanir' or 'deildir / stofnunareiningar'.</p><p>Here you can find which employees belong to an organization or an organization unit.</p><h3>OrganizationUnit</h3><p>This controller gives more details about an organization unit. In icelandic 'deildir / stofnunareiningar'.</p><h3>TimeRegistration</h3><p>This controller contains endpoints to import, create, read, update and delete time registrations and import groups. One endpoint is used to send a batch of timeregistrations from Elfur to Orri.</p><h4>Import time registration processes explained:</h4><p>First the timeregistrations are saved to Elfur database. When the time registration \"batch\", called \"Import Group\" in Elfur, is ready, they are sent to Orri as a batch.</p><p>There are two ways to import time registrations to Elfur database. Via excel file or manually adding them to an import group.</p><p><strong>Importing time registrations from an excel file, then process the time registrations to Orri.</strong>\r\n 1. {ServerURL}/v1/time_registration/<strong>import_from_excel</strong>\r\n - Returns an importGroupId.\r\n 2. {ServerURL}/v1/time_registration/<strong>process_time_registrations_import_group?importGroupId={importGroupId}</strong>\r\n - We get the importGroupId from step 1, the excel import.\r\n\r\n<strong>Create an import group and add time registrations to it. When all time registrations are added, process the time registrations to Orri.</strong>\r\n 1. {ServerURL}/v1/time_registration/<strong>create_import_group</strong>\r\n - Returns an importGroupId.\r\n 2. {ServerURL}/v1/time_registration/<strong>add_timeregistrations_to_import_group/{importGroupId}/{isFinalized}</strong>\r\n - Add time registrations to the import group. One or more at a time.\r\n - When last time registration is added, set isFinalized to true.\r\n 3. {ServerURL}/v1/time_registration/<strong>process_time_registrations_import_group?importGroupId={importGroupId}</strong>\r\n\r\n<p>Time registrations are now in Orri.</p><h3>Vacancy</h3><p>This controller contains endpoints to create, fetch, and modify vacancies and submit vacancy statistics.</p><p>Refer to the <strong>NewVacancyDto</strong> schema at the bottom of this page for what fields are available when creating a vacancy.<br>Refer to the <strong>UpdateVacancyDto</strong> schema at the bottom of this page for what fields are available when updating a vacancy.</p><p>When updating a vacancy, any number of fields can be included - only those included will be changed. However, the <strong>\"updatedBy\"</strong> field must always be included.</p><p><strong><strong>When creating a vacancy, the following fields are required and must not be empty:</strong></strong></p><ul><li><strong>\"heading\"</strong>: \"string\"</li><li><strong>\"jobTitle\"</strong>: \"string\"</li><li><strong>\"publishDate\"</strong>: \"2025-05-13T15:12:42.200Z\"</li><li><strong>\"openTo\"</strong>: \"2025-05-13T15:12:42.200Z\"</li><li><strong>\"introduction\"</strong>: \"string\"</li><li><strong>\"assignments\"</strong>: \"string\"</li><li><strong>\"qualifications\"</strong>: \"string\"</li><li><strong>\"moreInfo\"</strong>: \"string\"</li><li><strong>\"orgName\"</strong>: \"string\"</li><li><strong>\"contact1Name\"</strong>: \"string\"</li><li><strong>\"contact1JobTitle\"</strong>: \"string\"</li><li><strong>\"contact1EmailAddress\"</strong>: \"string\"</li><li><strong>\"contact1PhoneNumber\"</strong>: \"string\"</li><li><strong>\"webLinkUrl\"</strong>: \"string\"</li><li><strong>\"hoursRatio\"</strong>: \"string\"</li><li><strong>\"unionName\"</strong>: \"string\"</li><li><strong>\"locations\"</strong>: \"string\"</li><li><strong>\"createdBy\"</strong>: \"string\"</li><li><strong>\"sourceSystem\"</strong>: \"string\"</li></ul><p><strong><strong>When updating a vacancy, the following restrictions apply:</strong></strong></p><ul><li><strong>\"openTo\"</strong> must be at least 10 days later from when the vacancy is updated.</ul><p><strong><strong>When creating OR updating a vacancy, the following restrictions apply:</strong></strong></p><ul><li><strong>\"publishDate\"</strong> and<strong> \"openTo\"</strong> must be in the future</li><li><strong>\"publishDate\"</strong> must be at least 10 days earlier than <strong>\"openTo\"</strong></li><li><strong>\"openTo\"</strong> must be a working day (not a weekend day nor an Icelandic holiday (rau√∞ur dagur))</li><li>If <strong>\"contact2Name\"</strong> is provided then <strong>\"contact2JobTitle\"</strong>, <strong>\"contact2EmailAddress\"</strong> and <strong>\"contact2PhoneNumber\"</strong> must be provided as well <ul><li><i>When updating, this only applies if <strong>\"contact2JobTitle\"</strong>, <strong>\"contact2EmailAddress\"</strong> and <strong>\"contact2PhoneNumber\"</strong> do not already exist in the vacancy</i></li></ul><li><strong>\"contact1PhoneNumber\"</strong> and <strong>\"contact2PhoneNumber\"</strong> can only contain numbers and optionally phone number related characters (\"-\", \"+\", \"(\", \")\", or whitespace)</li><li><strong>\"webLinkUrl\"</strong> must be a valid URL that returns a valid response</li></ul><p>There is also an endpoint to add vacancy statistics which users are <strong><strong>required</strong></strong> to use to once the hiring process for the corresponding vacancy is finished.<br>Refer to the <strong>NewVacancyStatsDto</strong> schema at the bottom of this page for what fields should be included when submitting.</p><h3>OpenInvoices</h3><p>This controller provides endpoints to fetch data related to open invoices.</p>",
    "version": "1.0"
  },
  "paths": {
    "/v1/account/confirm_account_ledger": {
      "get": {
        "tags": ["Account"],
        "summary": "[GET] Confirm account ledger.\r\nThis endpoint fetches data from Orri.",
        "parameters": [
          {
            "name": "account",
            "in": "query",
            "description": "Account Id.",
            "schema": { "type": "string" }
          },
          {
            "name": "ledger",
            "in": "query",
            "description": "Ledger Id.",
            "schema": { "type": "string" }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Confirmation date.",
            "schema": { "type": "string", "format": "date-time" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccountLedgerConfirmation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountLedgerConfirmation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountLedgerConfirmation"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/account/live": {
      "get": {
        "tags": ["Account"],
        "summary": "[GET] Basic check to see if controller is living.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": { "schema": { "type": "string" } },
              "application/json": { "schema": { "type": "string" } },
              "text/json": { "schema": { "type": "string" } }
            }
          }
        }
      }
    },
    "/live": {
      "get": {
        "tags": ["ElfurBase"],
        "summary": "[GET] Basic check to see if controller is living.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": { "schema": { "type": "string" } },
              "application/json": { "schema": { "type": "string" } },
              "text/json": { "schema": { "type": "string" } }
            }
          }
        }
      }
    },
    "/v1/employee/.nationalid": {
      "get": {
        "tags": ["Employee"],
        "summary": "[GET] Get information about a single employee.\r\nThis endpoint fetches data from Orri.",
        "parameters": [
          {
            "name": "X-Param-NationalId",
            "in": "header",
            "description": "Employee nationalId (ie. kennitala). Sent with the header as \"X-Param-NationalId\".",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Employee" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Employee" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/Employee" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/employee": {
      "get": {
        "tags": ["Employee"],
        "summary": "[GET] Get a list of Employees.\r\nThis endpoint fetches data from Orri.",
        "parameters": [
          {
            "name": "rowOffset",
            "in": "query",
            "description": "(Optional) Offset for pagination. Row where to start fetching from.",
            "schema": { "type": "integer", "format": "int32", "default": 0 }
          },
          {
            "name": "fetchSize",
            "in": "query",
            "description": "(Optional) Fetch size for pagination. How many rows to fetch.",
            "schema": { "type": "integer", "format": "int32", "default": 25 }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeePaginationResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeePaginationResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeePaginationResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/employee/get_employees_with_active_assignments": {
      "get": {
        "tags": ["Employee"],
        "summary": "[GET] Get a list of Employees and return only active assignments.\r\nWe still return the employee with no assignments if there are no active assignments on him.\r\nThis endpoint fetches data from Orri.",
        "parameters": [
          {
            "name": "rowOffset",
            "in": "query",
            "description": "(Optional) Offset for pagination. Row where to start fetching from.",
            "schema": { "type": "integer", "format": "int32", "default": 0 }
          },
          {
            "name": "fetchSize",
            "in": "query",
            "description": "(Optional) Fetch size for pagination. How many rows to fetch.",
            "schema": { "type": "integer", "format": "int32", "default": 25 }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeePaginationResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeePaginationResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeePaginationResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/employee/live": {
      "get": {
        "tags": ["Employee"],
        "summary": "[GET] Basic check to see if controller is living.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": { "schema": { "type": "string" } },
              "application/json": { "schema": { "type": "string" } },
              "text/json": { "schema": { "type": "string" } }
            }
          }
        }
      }
    },
    "/v1/openinvoices/invoices": {
      "get": {
        "tags": ["OpenInvoices"],
        "summary": "[GET] Get a paginated list of open invoices with dimension data.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return (default: 50, max: 100).",
            "schema": { "type": "integer", "format": "int32", "default": 50 }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Cursor to get items after (for next page).",
            "schema": { "type": "string" }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Cursor to get items before (for previous page).",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OpenInvoiceDetailPaginatedResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenInvoiceDetailPaginatedResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenInvoiceDetailPaginatedResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/openinvoices/live": {
      "get": {
        "tags": ["OpenInvoices"],
        "summary": "[GET] Basic check to see if controller is living.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": { "schema": { "type": "string" } },
              "application/json": { "schema": { "type": "string" } },
              "text/json": { "schema": { "type": "string" } }
            }
          }
        }
      }
    },
    "/v1/organization/get_organization_list": {
      "get": {
        "tags": ["Organization"],
        "summary": "[GET] Get a list of organizations (ie. stofnunum).\r\nThis endpoint fetches data from FJS database.",
        "parameters": [
          {
            "name": "validFrom",
            "in": "query",
            "description": "(Optional) Filter by date. The start date of the organization.",
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "validTo",
            "in": "query",
            "description": "(Optional) Filter by date. The end date of the organization.",
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "(Optional) Filter to filter down the organization list.",
            "schema": { "type": "string", "default": "" }
          },
          {
            "name": "isSalaryPayer",
            "in": "query",
            "description": "If 1 then we get all organizations that pay salarys, it is the default value. If 0 then we get all projects.",
            "schema": { "type": "integer", "format": "int32", "default": 1 }
          },
          {
            "name": "rowOffset",
            "in": "query",
            "description": "(Optional) Offset for pagination. Row where to start fetching from.",
            "schema": { "type": "integer", "format": "int32", "default": 0 }
          },
          {
            "name": "fetchSize",
            "in": "query",
            "description": "(Optional) Fetch size for pagination. How many rows to fetch.",
            "schema": { "type": "integer", "format": "int32", "default": 25 }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationResponseDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationResponseDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationResponseDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/organization/get_organization": {
      "get": {
        "tags": ["Organization"],
        "summary": "[GET] Get one organization.\r\nThis endpoint fetches data from FJS database.",
        "parameters": [
          {
            "name": "organizationNumber",
            "in": "query",
            "description": "The organization number to fetch details about.",
            "schema": { "type": "string" }
          },
          {
            "name": "isSalaryPayer",
            "in": "query",
            "description": "If 1 then we get all organizations that pay salarys, it is the default value. If 0 then we get all projects.",
            "schema": { "type": "integer", "format": "int32", "default": 1 }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/organization/live": {
      "get": {
        "tags": ["Organization"],
        "summary": "[GET] Basic check to see if controller is living.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": { "schema": { "type": "string" } },
              "application/json": { "schema": { "type": "string" } },
              "text/json": { "schema": { "type": "string" } }
            }
          }
        }
      }
    },
    "/v1/organization_employee/get_employees_for_organization": {
      "get": {
        "tags": ["OrganizationEmployee"],
        "summary": "[GET] Get a list of employees by organization number or/and by organization unit id.\r\nThis endpoint fetches data from FJS database.",
        "description": "\nIf organization unit number is set then only employees for that organization unit will be returned.",
        "parameters": [
          {
            "name": "organizationNumber",
            "in": "query",
            "description": "Organization number (ie. stofnun).",
            "schema": { "type": "string" }
          },
          {
            "name": "organizationUnitNumber",
            "in": "query",
            "description": "(Optional) Organization unit number (ie. deild). If used, only employees for the given OU will be returned. If not set or set to 0, all employees for that organization will be returned.",
            "schema": { "type": "integer", "format": "int32", "default": 0 }
          },
          {
            "name": "rowOffset",
            "in": "query",
            "description": "(Optional) Offset for pagination. Row where to start fetching from.",
            "schema": { "type": "integer", "format": "int32", "default": 0 }
          },
          {
            "name": "fetchSize",
            "in": "query",
            "description": "(Optional) Fetch size for pagination. How many rows to fetch.",
            "schema": { "type": "integer", "format": "int32", "default": 25 }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeBasicResponseDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeBasicResponseDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeBasicResponseDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/organization_employee/live": {
      "get": {
        "tags": ["OrganizationEmployee"],
        "summary": "[GET] Basic check to see if controller is living.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": { "schema": { "type": "string" } },
              "application/json": { "schema": { "type": "string" } },
              "text/json": { "schema": { "type": "string" } }
            }
          }
        }
      }
    },
    "/v1/organization_unit/get_organization_unit_list": {
      "get": {
        "tags": ["OrganizationUnit"],
        "summary": "[GET] Get a list of organization units (ie. Stofnunareiningum/Deildum).\r\nThis endpoint fetches data from FJS database.",
        "parameters": [
          {
            "name": "organizationNumber",
            "in": "query",
            "description": "The organization number (fj√°rlagan√∫mer stofnunar) to get a list of OU's for.",
            "schema": { "type": "string" }
          },
          {
            "name": "validFrom",
            "in": "query",
            "description": "(Optional) Filter by date. The start date of the organization unit.",
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "validTo",
            "in": "query",
            "description": "(Optional) Filter by date. The end date of the organization unit.",
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "rowOffset",
            "in": "query",
            "description": "(Optional) Offset for pagination. Row where to start fetching from.",
            "schema": { "type": "integer", "format": "int32", "default": 0 }
          },
          {
            "name": "fetchSize",
            "in": "query",
            "description": "(Optional) Fetch size for pagination. How many rows to fetch.",
            "schema": { "type": "integer", "format": "int32", "default": 25 }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationUnitResponseDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationUnitResponseDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationUnitResponseDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/organization_unit/get_organization_unit": {
      "get": {
        "tags": ["OrganizationUnit"],
        "summary": "[GET] Get details about an organization unit.\r\nThis endpoint fetches data from FJS database.",
        "parameters": [
          {
            "name": "organizationUnitNumber",
            "in": "query",
            "description": "The organization unit number (fj√°rlagan√∫mer einingar/deildar) to fetch details about.",
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/organization_unit/get_organization_unit_name": {
      "get": {
        "tags": ["OrganizationUnit"],
        "summary": "[GET] Get organization unit name by organization unit number.\r\nThis endpoint fetches data from FJS database.",
        "parameters": [
          {
            "name": "organizationUnitNumber",
            "in": "query",
            "description": "The organization unit number to fetch the name for.",
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": { "schema": { "type": "string" } },
              "application/json": { "schema": { "type": "string" } },
              "text/json": { "schema": { "type": "string" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/organization_unit/live": {
      "get": {
        "tags": ["OrganizationUnit"],
        "summary": "[GET] Basic check to see if controller is living.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": { "schema": { "type": "string" } },
              "application/json": { "schema": { "type": "string" } },
              "text/json": { "schema": { "type": "string" } }
            }
          }
        }
      }
    },
    "/v1/time_registration/.nationalid": {
      "get": {
        "tags": ["TimeRegistration"],
        "summary": "[GET] Get time registration import from a nationalId and date range.\r\nThis endpoint fetches data from Elfur database.",
        "parameters": [
          {
            "name": "X-Param-NationalId",
            "in": "header",
            "description": "Employee nationalId (ie. kennitala). Sent with the header as \"X-Param-NationalId\".",
            "schema": { "type": "string" }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Registration date from (YYYY-MM-DD).",
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Registration date to (YYYY-MM-DD).",
            "schema": { "type": "string", "format": "date-time" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeRegistrationImportDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeRegistrationImportDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeRegistrationImportDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/time_registration/{importGroupId}": {
      "get": {
        "tags": ["TimeRegistration"],
        "summary": "[GET] Get import group with status and list of imports.\r\nThis endpoint fetches data from Elfur database.",
        "parameters": [
          {
            "name": "importGroupId",
            "in": "path",
            "description": "The import group Id to fetch.",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ImportGroupWithTimeRegistrationsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportGroupWithTimeRegistrationsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportGroupWithTimeRegistrationsDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/time_registration/get_all_import_groups": {
      "get": {
        "tags": ["TimeRegistration"],
        "summary": "[GET] Get a list of all import groups, active and completed.\r\nThis endpoint fetches data from Elfur database.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ImportGroup" }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ImportGroup" }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ImportGroup" }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/time_registration/get_all_active_import_groups": {
      "get": {
        "tags": ["TimeRegistration"],
        "summary": "[GET] Get a list of all active import groups.\r\nThis endpoint fetches data from Elfur database.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ImportGroup" }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ImportGroup" }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ImportGroup" }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/time_registration/import_from_excel": {
      "post": {
        "tags": ["TimeRegistration"],
        "summary": "[POST] Import time registrations from excel file.\r\nThis endpoint adds data from excel file to Elfur database.",
        "requestBody": {
          "description": "Excel file to import.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "excelFile": { "type": "string", "format": "binary" }
                }
              },
              "encoding": { "excelFile": { "style": "form" } }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ResultExcelImport" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResultExcelImport" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ResultExcelImport" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/time_registration/process_time_registrations_import_group": {
      "post": {
        "tags": ["TimeRegistration"],
        "summary": "[POST] Process time registrations to Orri.\r\nThis endpoint sends data from Elfur database to Orri.",
        "parameters": [
          {
            "name": "importGroupId",
            "in": "query",
            "description": "The id of the import group (ie. batch) to send to Orri.",
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "validateOnly",
            "in": "query",
            "description": "(Optional) Flag to indicate if the batch should only be validated and not processed. Default is 'N' which means the batch will be processed.",
            "schema": { "type": "string", "default": "N" }
          }
        ],
        "responses": { "500": { "description": "Internal Server Error" } }
      }
    },
    "/v1/time_registration/create_import_group": {
      "post": {
        "tags": ["TimeRegistration"],
        "summary": "[POST] Create an empty import group.\r\nThis endpoint creates data (ImportGroup table) in Elfur database.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": { "type": "string", "format": "uuid" }
              },
              "application/json": {
                "schema": { "type": "string", "format": "uuid" }
              },
              "text/json": { "schema": { "type": "string", "format": "uuid" } }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/time_registration/add_timeregistrations_to_import_group/{importGroupId}/{isFinalized}": {
      "post": {
        "tags": ["TimeRegistration"],
        "summary": "[POST] Add time registrations and connect them to an import group.\r\nThis endpoint creates data (TimeRegistrationImport table) in Elfur database.",
        "parameters": [
          {
            "name": "importGroupId",
            "in": "path",
            "description": "The import group id to add the new time registrations.",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "isFinalized",
            "in": "path",
            "description": "(Optional) Default false. Set as true if those are the last time registrations for this group. Then the item group will be marked as ready to send to Orri.",
            "required": true,
            "schema": { "type": "boolean", "default": false }
          }
        ],
        "requestBody": {
          "description": "List of time registrations to add.",
          "required": false,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AddTimeRegistrationsDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTimeRegistrationsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTimeRegistrationsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddTimeRegistrationsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string", "format": "uuid" }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string", "format": "uuid" }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string", "format": "uuid" }
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/time_registration/delete_import_group": {
      "delete": {
        "tags": ["TimeRegistration"],
        "summary": "[DELETE] Delete an import group and all time registrations in it.\r\nThis endpoint deletes data from Elfur database.",
        "parameters": [
          {
            "name": "importGroupId",
            "in": "query",
            "description": "The import group id to delete.",
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/time_registration/delete_time_registrations": {
      "delete": {
        "tags": ["TimeRegistration"],
        "summary": "[DELETE] Delete time registration list from an import group.\r\nThis endpoint deletes data from Elfur database.",
        "parameters": [
          {
            "name": "importGroupId",
            "in": "query",
            "description": "The import group id to delete time registrations from.",
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "The list of time registration import ids to delete.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": { "type": "string", "format": "uuid" }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "type": "string", "format": "uuid" }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": { "type": "string", "format": "uuid" }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": { "type": "string", "format": "uuid" }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/time_registration/update_import_group": {
      "put": {
        "tags": ["TimeRegistration"],
        "summary": "[PUT] Update import group information.\r\nThis endpoint modifies data in Elfur database.",
        "requestBody": {
          "description": "The updated import group information.",
          "content": {
            "application/json-patch+json": {
              "schema": { "$ref": "#/components/schemas/ImportGroupDto" }
            },
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ImportGroupDto" }
            },
            "text/json": {
              "schema": { "$ref": "#/components/schemas/ImportGroupDto" }
            },
            "application/*+json": {
              "schema": { "$ref": "#/components/schemas/ImportGroupDto" }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/time_registration/update_time_registration": {
      "put": {
        "tags": ["TimeRegistration"],
        "summary": "[PUT] Update time registration.\r\nThis endpoint modifies data in Elfur database.",
        "requestBody": {
          "description": "The updated time registration information.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TimeRegistrationImportDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeRegistrationImportDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeRegistrationImportDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TimeRegistrationImportDto"
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/time_registration/get_absence_categories": {
      "get": {
        "tags": ["TimeRegistration"],
        "summary": "[GET] Get a list of all absence categories.\r\nThis endpoint fetches data from FJS database.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AbsenceCategoryResponseDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AbsenceCategoryResponseDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AbsenceCategoryResponseDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/time_registration/get_salary_types": {
      "get": {
        "tags": ["TimeRegistration"],
        "summary": "[GET] Get a list of all salary types.\r\nThis endpoint fetches data from FJS database.",
        "parameters": [
          {
            "name": "rowOffset",
            "in": "query",
            "description": "Offset for pagination. Row where to start fetching from.",
            "schema": { "type": "integer", "format": "int32", "default": 0 }
          },
          {
            "name": "fetchSize",
            "in": "query",
            "description": "Fetch size for pagination. How many rows to fetch.",
            "schema": { "type": "integer", "format": "int32", "default": 25 }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SalaryTypeResponseDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SalaryTypeResponseDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SalaryTypeResponseDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/time_registration/live": {
      "get": {
        "tags": ["TimeRegistration"],
        "summary": "[GET] Basic check to see if controller is living.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": { "schema": { "type": "string" } },
              "application/json": { "schema": { "type": "string" } },
              "text/json": { "schema": { "type": "string" } }
            }
          }
        }
      }
    },
    "/v1/vacancy/get_vacancy_list": {
      "get": {
        "tags": ["Vacancy"],
        "summary": "[GET] Get a list of vacancies (i.e. laus st√∂rf).\r\nThis endpoint fetches data from FJS database.",
        "parameters": [
          {
            "name": "openFrom",
            "in": "query",
            "description": "(Optional) Filter by date. The start date of the application period.",
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "openTo",
            "in": "query",
            "description": "(Optional) Filter by date. The end date of the application period.",
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "(Optional) Filter to filter down the vacancy list.",
            "schema": { "type": "string", "default": "" }
          },
          {
            "name": "rowOffset",
            "in": "query",
            "description": "(Optional) Offset for pagination. Row where to start fetching from.",
            "schema": { "type": "integer", "format": "int32", "default": 0 }
          },
          {
            "name": "fetchSize",
            "in": "query",
            "description": "(Optional) Fetch size for pagination. How many rows to fetch.",
            "schema": { "type": "integer", "format": "int32", "default": 25 }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/VacancyResponseDto" }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/VacancyResponseDto" }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/VacancyResponseDto" }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/vacancy/get_vacancy": {
      "get": {
        "tags": ["Vacancy"],
        "summary": "[GET] Get one vacancy.\r\nThis endpoint fetches data from FJS database.",
        "parameters": [
          {
            "name": "vacancyId",
            "in": "query",
            "description": "The vacancy ID to fetch details about.",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/VacancyResponseDto" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VacancyResponseDto" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/VacancyResponseDto" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/vacancy/create_vacancy": {
      "post": {
        "tags": ["Vacancy"],
        "summary": "[POST] Create a new vacancy.\r\nThis endpoint creates data (row in VACANCY table) in FJS database.",
        "requestBody": {
          "description": "The new vacancy information.",
          "content": {
            "application/json-patch+json": {
              "schema": { "$ref": "#/components/schemas/NewVacancyDto" }
            },
            "application/json": {
              "schema": { "$ref": "#/components/schemas/NewVacancyDto" }
            },
            "text/json": {
              "schema": { "$ref": "#/components/schemas/NewVacancyDto" }
            },
            "application/*+json": {
              "schema": { "$ref": "#/components/schemas/NewVacancyDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": { "type": "string", "format": "uuid" }
              },
              "application/json": {
                "schema": { "type": "string", "format": "uuid" }
              },
              "text/json": { "schema": { "type": "string", "format": "uuid" } }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/vacancy/deactivate_vacancy": {
      "put": {
        "tags": ["Vacancy"],
        "summary": "[PUT] Deactivate a vacancy.\r\nThis endpoint modifies data from FJS database.",
        "parameters": [
          {
            "name": "vacancyId",
            "in": "query",
            "description": "The GUID of the vacancy to deactivate.",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/vacancy/update_vacancy": {
      "put": {
        "tags": ["Vacancy"],
        "summary": "[PUT] Update vacancy information.\r\nThis endpoint modifies data in FJS database.",
        "requestBody": {
          "description": "The updated vacancy information.",
          "content": {
            "application/json-patch+json": {
              "schema": { "$ref": "#/components/schemas/UpdateVacancyDto" }
            },
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateVacancyDto" }
            },
            "text/json": {
              "schema": { "$ref": "#/components/schemas/UpdateVacancyDto" }
            },
            "application/*+json": {
              "schema": { "$ref": "#/components/schemas/UpdateVacancyDto" }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/vacancy/add_vacancy_stats": {
      "post": {
        "tags": ["Vacancy"],
        "summary": "[POST] Add new vacancy stats.\r\nThis endpoint creates data (rows in VacancyStats table) in FJS database.",
        "requestBody": {
          "description": "The new vacancy statistics.",
          "content": {
            "application/json-patch+json": {
              "schema": { "$ref": "#/components/schemas/NewVacancyStatsDto" }
            },
            "application/json": {
              "schema": { "$ref": "#/components/schemas/NewVacancyStatsDto" }
            },
            "text/json": {
              "schema": { "$ref": "#/components/schemas/NewVacancyStatsDto" }
            },
            "application/*+json": {
              "schema": { "$ref": "#/components/schemas/NewVacancyStatsDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": { "type": "string", "format": "uuid" }
              },
              "application/json": {
                "schema": { "type": "string", "format": "uuid" }
              },
              "text/json": { "schema": { "type": "string", "format": "uuid" } }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/v1/vacancy/live": {
      "get": {
        "tags": ["Vacancy"],
        "summary": "[GET] Basic check to see if controller is living.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": { "schema": { "type": "string" } },
              "application/json": { "schema": { "type": "string" } },
              "text/json": { "schema": { "type": "string" } }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AbsenceCategoryResponseDto": {
        "type": "object",
        "properties": {
          "absenceCategoryType": {
            "type": "string",
            "description": "Gets or sets the AbsenceCategoryType property.",
            "nullable": true
          },
          "absenceCategoryTypeId": {
            "type": "integer",
            "description": "Gets or sets the AbsenceCategoryTypeId property.",
            "format": "int32"
          },
          "absenceCategoryName": {
            "type": "string",
            "description": "Gets or sets the AbsenceCategoryName property.",
            "nullable": true
          },
          "absenceCategoryId": {
            "type": "integer",
            "description": "Gets or sets the AbsenceCategoryId property.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents the AbsenceCategoryResponseDto."
      },
      "AccountLedgerConfirmation": {
        "type": "object",
        "properties": {
          "account": {
            "type": "string",
            "description": "Account Id",
            "nullable": true
          },
          "ledger": {
            "type": "string",
            "description": "Ledger Id",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "Date of confirmation",
            "format": "date-time"
          },
          "result": {
            "type": "string",
            "description": "Result OK/Error",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "Message if not valid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Account legder confirmation class"
      },
      "Assignment": {
        "type": "object",
        "properties": {
          "assignmentId": {
            "type": "integer",
            "description": "Unique Assignement Id",
            "format": "int32"
          },
          "jobName": {
            "type": "string",
            "description": "Job name - Short",
            "nullable": true
          },
          "jobLongName": {
            "type": "string",
            "description": "Job name - Long",
            "nullable": true
          },
          "primaryFlag": {
            "type": "string",
            "description": "Is this the primary assignment of employee",
            "nullable": true
          },
          "managerFlag": {
            "type": "string",
            "description": "Is the employee assignment a manager assignment",
            "nullable": true
          },
          "assignmentStatus": {
            "type": "string",
            "description": "Assignment status (ie. active)",
            "nullable": true
          },
          "assignmentPercent": {
            "type": "integer",
            "description": "Assignment percentage",
            "format": "int32"
          },
          "assignmentStartDate": {
            "type": "string",
            "description": "Start of assignment",
            "format": "date-time"
          },
          "assignmentEndDate": {
            "type": "string",
            "description": "End of assignment if ended",
            "format": "date-time",
            "nullable": true
          },
          "organizationId": {
            "type": "integer",
            "description": "Organization the assigment is associated with",
            "format": "int32"
          },
          "organizationName": {
            "type": "string",
            "description": "Organization name",
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "description": "Location Code of organization",
            "nullable": true
          },
          "locationDescription": {
            "type": "string",
            "description": "Location description of organization",
            "nullable": true
          },
          "locationAddress": {
            "type": "string",
            "description": "Location address of organization",
            "nullable": true
          },
          "locationPostalCode": {
            "type": "string",
            "description": "Postcode of organization",
            "nullable": true
          },
          "parentOrganizationId": {
            "type": "integer",
            "description": "Parent oragnisation",
            "format": "int32"
          },
          "parentOrganizationName": {
            "type": "string",
            "description": "Parent oragnisation name",
            "nullable": true
          },
          "supervisorNationalIdentifier": {
            "type": "string",
            "description": "Supervisor National Id",
            "nullable": true
          },
          "supervisorPersonId": {
            "type": "integer",
            "description": "Supervisor Perspon Id",
            "format": "int32"
          },
          "supervisorName": {
            "type": "string",
            "description": "Supervisor Name",
            "nullable": true
          },
          "supervisorEmail": {
            "type": "string",
            "description": "Supervisor Email",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Employee Class"
      },
      "Employee": {
        "type": "object",
        "properties": {
          "nationalIdentifier": {
            "type": "string",
            "description": "NationalIdentifier",
            "nullable": true
          },
          "employeeName": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Email",
            "nullable": true
          },
          "gsm_phone": {
            "type": "integer",
            "description": "GSM - Phone number",
            "format": "int32"
          },
          "workPhone": {
            "type": "integer",
            "description": "Work - Phone number",
            "format": "int32"
          },
          "employeeNumber": {
            "type": "integer",
            "description": "Unique EmployeeNumber",
            "format": "int32"
          },
          "personId": {
            "type": "integer",
            "description": "Unique Personal Id",
            "format": "int32"
          },
          "sex": {
            "type": "string",
            "description": "Gender",
            "nullable": true
          },
          "nationality": {
            "type": "string",
            "description": "Nationality",
            "nullable": true
          },
          "assignments": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Assignment" },
            "description": "Assignment list",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Employee Class"
      },
      "EmployeeBasicResponseDto": {
        "type": "object",
        "properties": {
          "nationalIdentifier": {
            "type": "string",
            "description": "Gets or sets the NationalIdentifier.",
            "nullable": true
          },
          "employeeName": {
            "type": "string",
            "description": "Gets or sets the EmployeeName.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Gets or sets the Email.",
            "nullable": true
          },
          "workPhone": {
            "type": "integer",
            "description": "Gets or sets the WorkPhone.",
            "format": "int32",
            "nullable": true
          },
          "employeeNumber": {
            "type": "string",
            "description": "Gets or sets the EmployeeNumber.",
            "nullable": true
          },
          "personID": {
            "type": "number",
            "description": "Gets or sets the PersonID.",
            "format": "double"
          },
          "sex": {
            "type": "string",
            "description": "Gets or sets the Sex.",
            "nullable": true
          },
          "nationality": {
            "type": "string",
            "description": "Gets or sets the Nationality.",
            "nullable": true
          },
          "assignmentID": {
            "type": "number",
            "description": "Gets or sets the AssignmentID.",
            "format": "double"
          },
          "jobName": {
            "type": "string",
            "description": "Gets or sets the JobName.",
            "nullable": true
          },
          "jobLongName": {
            "type": "string",
            "description": "Gets or sets the JobLongName.",
            "nullable": true
          },
          "istarf4": {
            "type": "string",
            "description": "Gets or sets the Istarf4.",
            "nullable": true
          },
          "istarf6": {
            "type": "string",
            "description": "Gets or sets the Istarf6.",
            "nullable": true
          },
          "primaryFlag": {
            "type": "string",
            "description": "Gets or sets the PrimaryFlag.",
            "nullable": true
          },
          "managerFlag": {
            "type": "string",
            "description": "Gets or sets the ManagerFlag.",
            "nullable": true
          },
          "assignmentStatus": {
            "type": "string",
            "description": "Gets or sets the AssignmentStatus.",
            "nullable": true
          },
          "assignmentStatusTypeId": {
            "type": "number",
            "description": "Gets or sets the AssignmentStatusTypeId.",
            "format": "double",
            "nullable": true
          },
          "assignmentStatusGroup": {
            "type": "string",
            "description": "Gets or sets the AssignmentStatusGroup.",
            "nullable": true
          },
          "assignmentPercent": {
            "type": "integer",
            "description": "Gets or sets the AssignmentPercent.",
            "format": "int32",
            "nullable": true
          },
          "assignmentStartDate": {
            "type": "string",
            "description": "Gets or sets the AssignmentStartDate.",
            "format": "date-time",
            "nullable": true
          },
          "assignmentEndDate": {
            "type": "string",
            "description": "Gets or sets the AssignmentEndDate.",
            "format": "date-time",
            "nullable": true
          },
          "organizationId": {
            "type": "number",
            "description": "Gets or sets the OrganizationId.",
            "format": "double"
          },
          "organizationName": {
            "type": "string",
            "description": "Gets or sets the OrganizationName.",
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "description": "Gets or sets the LocationCode.",
            "nullable": true
          },
          "locationDescription": {
            "type": "string",
            "description": "Gets or sets the LocationDescription.",
            "nullable": true
          },
          "locationAddress": {
            "type": "string",
            "description": "Gets or sets the LocationAddress.",
            "nullable": true
          },
          "locationPostalCode": {
            "type": "string",
            "description": "Gets or sets the LocationPostalCode.",
            "nullable": true
          },
          "parentOrganizationId": {
            "type": "string",
            "description": "Gets or sets the ParentOrganizationId.",
            "nullable": true
          },
          "parentOrganizationName": {
            "type": "string",
            "description": "Gets or sets the ParentOrganizationName.",
            "nullable": true
          },
          "supervisorNationalIdentifier": {
            "type": "string",
            "description": "Gets or sets the SupervisorNationalIdentifier.",
            "nullable": true
          },
          "supervisorPersonId": {
            "type": "number",
            "description": "Gets or sets the SupervisorPersonId.",
            "format": "double",
            "nullable": true
          },
          "supervisorName": {
            "type": "string",
            "description": "Gets or sets the SupervisorName.",
            "nullable": true
          },
          "supervisorEmail": {
            "type": "string",
            "description": "Gets or sets the SupervisorEmail.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a basic response DTO for an employee."
      },
      "EmployeePaginationResult": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Employee" },
            "description": "Expected result collection",
            "nullable": true
          },
          "rowOffset": {
            "type": "integer",
            "description": "Pagination - Row offset",
            "format": "int32"
          },
          "fetchSize": {
            "type": "integer",
            "description": "Pagination - Fetch size",
            "format": "int32"
          },
          "numberOfRows": {
            "type": "integer",
            "description": "Pagination - Number of rows in result",
            "format": "int32"
          },
          "totalRows": {
            "type": "integer",
            "description": "Pagination - Total rows",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Paginated result of type T"
      },
      "ImportGroup": {
        "type": "object",
        "properties": {
          "fileName": {
            "maxLength": 256,
            "type": "string",
            "description": "Name of the import file",
            "nullable": true
          },
          "status": { "$ref": "#/components/schemas/ImportGroupStatus" },
          "batchName": {
            "maxLength": 30,
            "type": "string",
            "description": "Name of the batch",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total lines in the import group",
            "format": "int32"
          },
          "successes": {
            "type": "integer",
            "description": "Successfully imported",
            "format": "int32"
          },
          "errors": {
            "type": "integer",
            "description": "Errors",
            "format": "int32"
          },
          "timeRegistrations": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TimeRegistrationImport" },
            "description": "Collection of lines in the import group",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "description": "Creation date",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "Updated date",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "Who created",
            "nullable": true
          },
          "updatedBy": {
            "type": "string",
            "description": "Who updated",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data class for import group."
      },
      "ImportGroupDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "format": "uuid"
          },
          "fileName": {
            "type": "string",
            "description": "Name of the import file",
            "nullable": true
          },
          "batchName": {
            "type": "string",
            "description": "Name of the batch",
            "nullable": true
          },
          "status": { "$ref": "#/components/schemas/ImportGroupStatus" },
          "totalCount": {
            "type": "integer",
            "description": "Total lines in the import group",
            "format": "int32"
          },
          "successes": {
            "type": "integer",
            "description": "Successfully imported",
            "format": "int32"
          },
          "errors": {
            "type": "integer",
            "description": "Errors",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "ImportGroup Dto"
      },
      "ImportGroupStatus": {
        "enum": [
          "Initialized",
          "InProgress",
          "GroupReadyForPayrollSystem",
          "Completed",
          "CompletedWithErrors",
          "Error"
        ],
        "type": "string",
        "description": "Enum for describing the possible status an Import group can get"
      },
      "ImportGroupWithTimeRegistrationsDto": {
        "type": "object",
        "properties": {
          "timeRegistrations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeRegistrationImportDto"
            },
            "description": "Collection of lines in the import group",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "format": "uuid"
          },
          "fileName": {
            "type": "string",
            "description": "Name of the import file",
            "nullable": true
          },
          "batchName": {
            "type": "string",
            "description": "Name of the batch",
            "nullable": true
          },
          "status": { "$ref": "#/components/schemas/ImportGroupStatus" },
          "totalCount": {
            "type": "integer",
            "description": "Total lines in the import group",
            "format": "int32"
          },
          "successes": {
            "type": "integer",
            "description": "Successfully imported",
            "format": "int32"
          },
          "errors": {
            "type": "integer",
            "description": "Errors",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Import group with time registrations"
      },
      "ImportStatus": {
        "enum": ["Initialized", "ReadyToSend", "SentToPayrollSystem", "Error"],
        "type": "string",
        "description": "Enum for describing the status an import line can take"
      },
      "LineValidationResult": {
        "type": "object",
        "properties": {
          "lineNr": {
            "type": "integer",
            "description": "Gets or sets the line number.",
            "format": "int32"
          },
          "lineValidationErrorList": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Gets or sets the list of line validation errors.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the result of line validation."
      },
      "NewVacancyDto": {
        "type": "object",
        "properties": {
          "heading": {
            "type": "string",
            "description": "Gets or sets the heading.\r\nMaps to VACANCY.FYRIRSOGN",
            "nullable": true
          },
          "jobTitle": {
            "type": "string",
            "description": "Gets or sets the job title.\r\nMaps to VACANCY.STARFSHEITI",
            "nullable": true
          },
          "publishDate": {
            "type": "string",
            "description": "Gets or sets the date of publishing which also serves as the start of the application period.\r\nMaps to VACANCY.BIRTINGARDAGSETNING.",
            "format": "date-time"
          },
          "openTo": {
            "type": "string",
            "description": "Gets or sets the end of the application period.\r\nMaps to VACANCY.UMSOKNARFRESTUR_TIL.",
            "format": "date-time"
          },
          "introduction": {
            "type": "string",
            "description": "Gets or sets the introduction.\r\nMaps to VACANCY.INNGANGUR.",
            "nullable": true
          },
          "assignments": {
            "type": "string",
            "description": "Gets or sets the assignments.\r\nMaps to VACANCY.VERKEFNI.",
            "nullable": true
          },
          "qualifications": {
            "type": "string",
            "description": "Gets or sets the qualifications.\r\nMaps to VACANCY.HAEFNIKROFUR",
            "nullable": true
          },
          "moreInfo": {
            "type": "string",
            "description": "Gets or sets the qualifications.\r\nMaps to VACANCY.UNDIRTEXTI",
            "nullable": true
          },
          "orgName": {
            "type": "string",
            "description": "Gets or sets the organization name.\r\nMaps to VACANCY.STOFNUN_HEITI.",
            "nullable": true
          },
          "orgNr": {
            "type": "integer",
            "description": "Gets or sets the organization number (fj√°rlagali√∞ur).\r\nMaps to VACANCY.FJARLAGALIDUR.",
            "format": "int32",
            "nullable": true
          },
          "department": {
            "type": "string",
            "description": "Gets or sets the department.\r\nMaps to VACANCY.SKIPULAGSEINING.",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "Gets or sets the address.\r\nMaps to VACANCY.HEIMILISFANG.",
            "nullable": true
          },
          "postCode": {
            "type": "integer",
            "description": "Gets or sets the postal code.\r\nMaps to VACANCY.POSTFANG.",
            "format": "int32",
            "nullable": true
          },
          "contact1Name": {
            "type": "string",
            "description": "Gets or sets the name of contact 1.\r\nMaps to VACANCY.TENGILIDUR_1_NAFN.",
            "nullable": true
          },
          "contact1JobTitle": {
            "type": "string",
            "description": "Gets or sets the job title of contact 1.\r\nMaps to VACANCY.TENGILIDUR_1_STARFSHEITI.",
            "nullable": true
          },
          "contact1EmailAddress": {
            "type": "string",
            "description": "Gets or sets the email address of contact 1.\r\nMaps to VACANCY.TENGILIDUR_1_NETFANG.",
            "nullable": true
          },
          "contact1PhoneNumber": {
            "type": "string",
            "description": "Gets or sets the phone number of contact 1.\r\nMaps to VACANCY.TENGILIDUR_1_SIMANUMER.",
            "nullable": true
          },
          "contact2Name": {
            "type": "string",
            "description": "Gets or sets the name of contact 2.\r\nMaps to VACANCY.TENGILIDUR_2_NAFN.",
            "nullable": true
          },
          "contact2JobTitle": {
            "type": "string",
            "description": "Gets or sets the job title of contact 2.\r\nMaps to VACANCY.TENGILIDUR_2_STARFSHEITI.",
            "nullable": true
          },
          "contact2EmailAddress": {
            "type": "string",
            "description": "Gets or sets the email address of contact 2.\r\nMaps to VACANCY.TENGILIDUR_2_NETFANG.",
            "nullable": true
          },
          "contact2PhoneNumber": {
            "type": "string",
            "description": "Gets or sets the phone number of contact 2.\r\nMaps to VACANCY.TENGILIDUR_2_SIMANUMER.",
            "nullable": true
          },
          "webLinkUrl": {
            "type": "string",
            "description": "Gets or sets the weblink URL to the application website.\r\nMaps to VACANCY.HLEKKUR_URL.",
            "nullable": true
          },
          "webLinkText": {
            "type": "string",
            "description": "Gets or sets the weblink text to the application website.\r\nMaps to VACANCY.HLEKKUR_TEXTI.",
            "nullable": true
          },
          "hoursRatio": {
            "type": "string",
            "description": "Gets or sets the hours ratio.\r\nMaps to VACANCY.STARFSHLUTFALL.",
            "nullable": true
          },
          "unionName": {
            "type": "string",
            "description": "Gets or sets the union name.\r\nMaps to VACANCY.STETTARFELAG_HEITI.",
            "nullable": true
          },
          "logoUrl": {
            "type": "string",
            "description": "Gets or sets the logoURL.\r\nMaps to VACANCY.LOGO_URL.",
            "nullable": true
          },
          "locations": {
            "type": "string",
            "description": "Gets or sets the locations.\r\nMaps to VACANCY.STADSETNINGAR.",
            "nullable": true
          },
          "numberOfPositions": {
            "type": "integer",
            "description": "Gets or sets the number of positions associated with the vacancy.\r\nMaps to VACANCY.FJOLDI_STARFA.",
            "format": "int32"
          },
          "vacancyActive": {
            "type": "boolean",
            "description": "Gets or sets whether the vacancy is active.\r\nMaps to VACANCY.AUGLYSING_VIRK."
          },
          "createdBy": {
            "type": "string",
            "description": "Gets or sets the user that created the vacancy.\r\nMaps to VACANCY.CREATED_BY.",
            "nullable": true
          },
          "sourceSystem": {
            "type": "string",
            "description": "Gets or sets the system that created the vacancy.\r\nMaps to VACANCY.SOURCE_SYSTEM.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a data transfer object for a new entry to the VACANCY table.\r\nData is mapped from VACANCY in the database."
      },
      "NewVacancyStatsDto": {
        "type": "object",
        "properties": {
          "vacancyID": {
            "type": "string",
            "description": "Gets or sets the vacancy_id.\r\nMaps to vacancy.vacancy_id_pk",
            "nullable": true
          },
          "meanAge": {
            "type": "number",
            "description": "The mean age of applicants.\r\nMaps to VacancyStats.Value",
            "format": "float",
            "nullable": true
          },
          "numberOfApplicants": {
            "type": "integer",
            "description": "The number of applicants.\r\nMaps to VacancyStats.Value.",
            "format": "int32",
            "nullable": true
          },
          "percentageOfMaleApplicants": {
            "type": "number",
            "description": "The percentage of male applicants.\r\nMaps to VacancyStats.Value.",
            "format": "float",
            "nullable": true
          },
          "numberOfUnfinishedApplications": {
            "type": "integer",
            "description": "The number of people that started an application without applying.\r\nMaps to VacancyStats.Value.",
            "format": "int32",
            "nullable": true
          },
          "numberOfHired": {
            "type": "integer",
            "description": "The number of people hired from the vacancy.\r\nMaps to VacancyStats.Value.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a data transfer object for new entries to the VacancyStats table.\r\nData is mapped to table VacancyStats in the database."
      },
      "OpenInvoiceDetailPaginatedResponseDto": {
        "type": "object",
        "properties": {
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenInvoiceDetailResponseDto"
            },
            "description": "Gets or sets the list of invoice details.",
            "nullable": true
          },
          "pageInfo": { "$ref": "#/components/schemas/PageInfo" },
          "totalCount": {
            "type": "integer",
            "description": "Gets or sets the total count of items available.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents a paginated response for open invoice details."
      },
      "OpenInvoiceDetailResponseDto": {
        "type": "object",
        "properties": {
          "invoiceSK": {
            "type": "integer",
            "description": "Gets or sets the Invoice Surrogate Key.",
            "format": "int32"
          },
          "erpInvoiceId": {
            "type": "number",
            "description": "Gets or sets the ERP Invoice ID.",
            "format": "double"
          },
          "sourceErpId": {
            "type": "integer",
            "description": "Gets or sets the Source ERP ID.",
            "format": "int32"
          },
          "invoiceNum": {
            "type": "string",
            "description": "Gets or sets the Invoice Number.",
            "nullable": true
          },
          "invoiceCurrencyCode": {
            "type": "string",
            "description": "Gets or sets the Invoice Currency Code.",
            "nullable": true
          },
          "erpInvoiceAmount": {
            "type": "number",
            "description": "Gets or sets the ERP Invoice Amount.",
            "format": "double",
            "nullable": true
          },
          "erpInvoiceAmountISK": {
            "type": "number",
            "description": "Gets or sets the ERP Invoice Amount in ISK.",
            "format": "double",
            "nullable": true
          },
          "eInvoiceTaxInclusiveAmount": {
            "type": "number",
            "description": "Gets or sets the E-Invoice Tax Inclusive Amount.",
            "format": "double",
            "nullable": true
          },
          "eInvoiceTaxExclusiveAmount": {
            "type": "number",
            "description": "Gets or sets the E-Invoice Tax Exclusive Amount.",
            "format": "double",
            "nullable": true
          },
          "amountPaid": {
            "type": "number",
            "description": "Gets or sets the Amount Paid.",
            "format": "double",
            "nullable": true
          },
          "exchangeRate": {
            "type": "number",
            "description": "Gets or sets the Exchange Rate.",
            "format": "double",
            "nullable": true
          },
          "exchangeRateType": {
            "type": "string",
            "description": "Gets or sets the Exchange Rate Type.",
            "nullable": true
          },
          "apInvoicePaymentStatusFlag": {
            "type": "string",
            "description": "Gets or sets the AP Invoice Payment Status Flag.",
            "nullable": true
          },
          "apInvoiceGlDate": {
            "type": "string",
            "description": "Gets or sets the AP Invoice GL Date.",
            "format": "date-time",
            "nullable": true
          },
          "firstInvoicePaymentAccountingDate": {
            "type": "string",
            "description": "Gets or sets the First Invoice Payment Accounting Date.",
            "format": "date-time",
            "nullable": true
          },
          "lastInvoicePaymentAccountingDate": {
            "type": "string",
            "description": "Gets or sets the Last Invoice Payment Accounting Date.",
            "format": "date-time",
            "nullable": true
          },
          "invoiceIsConfidential": {
            "type": "boolean",
            "description": "Gets or sets whether the Invoice is Confidential.",
            "nullable": true
          },
          "datamartUpdateDate": {
            "type": "string",
            "description": "Gets or sets the Datamart Update Date.",
            "format": "date-time",
            "nullable": true
          },
          "datamartUpdateProcessId": {
            "type": "number",
            "description": "Gets or sets the Datamart Update Process ID.",
            "format": "double",
            "nullable": true
          },
          "customerId": {
            "type": "integer",
            "description": "Gets or sets the Customer ID.",
            "format": "int32"
          },
          "customerName": {
            "type": "string",
            "description": "Gets or sets the Customer Name.",
            "nullable": true
          },
          "customerLegalId": {
            "type": "string",
            "description": "Gets or sets the Customer Legal ID.",
            "nullable": true
          },
          "customerLegalIdScheme": {
            "type": "string",
            "description": "Gets or sets the Customer Legal ID Scheme.",
            "nullable": true
          },
          "supplierId": {
            "type": "integer",
            "description": "Gets or sets the Supplier ID.",
            "format": "int32"
          },
          "supplierName": {
            "type": "string",
            "description": "Gets or sets the Supplier Name.",
            "nullable": true
          },
          "supplierLegalId": {
            "type": "string",
            "description": "Gets or sets the Supplier Legal ID.",
            "nullable": true
          },
          "supplierLegalIdScheme": {
            "type": "string",
            "description": "Gets or sets the Supplier Legal ID Scheme.",
            "nullable": true
          },
          "supplierIsPrivatePersonProxy": {
            "type": "boolean",
            "description": "Gets or sets whether the supplier is a private person proxy.",
            "nullable": true
          },
          "supplierIsConfidential": {
            "type": "boolean",
            "description": "Gets or sets whether the supplier is confidential.",
            "nullable": true
          },
          "paymentMethodId": {
            "type": "integer",
            "description": "Gets or sets the Payment Method ID.",
            "format": "int32"
          },
          "paymentMethodCode": {
            "type": "string",
            "description": "Gets or sets the Payment Method Code.",
            "nullable": true
          },
          "paymentMethodMeaning_ISL": {
            "type": "string",
            "description": "Gets or sets the Payment Method Meaning in Icelandic.",
            "nullable": true
          },
          "paymentMethodDescription_ISL": {
            "type": "string",
            "description": "Gets or sets the Payment Method Description in Icelandic.",
            "nullable": true
          },
          "paymentMethodMeaning_ENG": {
            "type": "string",
            "description": "Gets or sets the Payment Method Meaning in English.",
            "nullable": true
          },
          "paymentMethodDescription_ENG": {
            "type": "string",
            "description": "Gets or sets the Payment Method Description in English.",
            "nullable": true
          },
          "invoiceSourceId": {
            "type": "integer",
            "description": "Gets or sets the Invoice Source ID.",
            "format": "int32"
          },
          "invoiceSourceCode": {
            "type": "string",
            "description": "Gets or sets the Invoice Source Code.",
            "nullable": true
          },
          "invoiceSourceMeaning_ISL": {
            "type": "string",
            "description": "Gets or sets the Invoice Source Name in Icelandic.",
            "nullable": true
          },
          "invoiceSourceDescription_ISL": {
            "type": "string",
            "description": "Gets or sets the Invoice Source Description in Icelandic.",
            "nullable": true
          },
          "invoiceSourceMeaning_ENG": {
            "type": "string",
            "description": "Gets or sets the Invoice Source Name in English.",
            "nullable": true
          },
          "invoiceSourceDescription_ENG": {
            "type": "string",
            "description": "Gets or sets the Invoice Source Description in English.",
            "nullable": true
          },
          "invoiceTypeId": {
            "type": "integer",
            "description": "Gets or sets the Invoice Type ID.",
            "format": "int32"
          },
          "invoiceTypeCode": {
            "type": "string",
            "description": "Gets or sets the Invoice Type Code.",
            "nullable": true
          },
          "invoiceTypeMeaning_ISL": {
            "type": "string",
            "description": "Gets or sets the Invoice Type Meaning in Icelandic.",
            "nullable": true
          },
          "invoiceTypeDescription_ISL": {
            "type": "string",
            "description": "Gets or sets the Invoice Type Description in Icelandic.",
            "nullable": true
          },
          "invoiceTypeMeaning_ENG": {
            "type": "string",
            "description": "Gets or sets the Invoice Type Meaning in English.",
            "nullable": true
          },
          "invoiceTypeDescription_ENG": {
            "type": "string",
            "description": "Gets or sets the Invoice Type Description in English.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a comprehensive data transfer object for an open invoice with all dimension data.\r\nData is mapped from the fact_Invoice table with LEFT JOINs to dimension tables."
      },
      "OrganizationResponseDto": {
        "type": "object",
        "properties": {
          "ministryName": {
            "type": "string",
            "description": "Gets or sets the ministry name.\r\nMaps to V_STOFNANIR.AS_RADUNEYTI_HEITI.",
            "nullable": true
          },
          "ministryCode": {
            "type": "string",
            "description": "Gets or sets the ministry code.\r\nMaps to V_STOFNANIR.SKAMMSTOFUN_RADUNEYTIS",
            "nullable": true
          },
          "ministryNumber": {
            "type": "string",
            "description": "Gets or sets the ministry number.\r\nMaps to V_STOFNANIR.RADUNEYTI_NUMER.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the organization name.\r\nMaps to V_STOFNANIR.STOFNUN_HEITI.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "Gets or sets the organization code.\r\nMaps to V_STOFNANIR.SKAMMSTOFUN_STOFNUNAR.",
            "nullable": true
          },
          "number": {
            "type": "string",
            "description": "Gets or sets the organization number (fj√°rlagan√∫mer).\r\nMaps to V_STOFNANIR.STOFNUN_NUMER",
            "nullable": true
          },
          "ssn": {
            "type": "string",
            "description": "Gets or sets the organization SSN.\r\nMaps to V_STOFNANIR.KENNITALA_STOFNUNAR.",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "Gets or sets the organization address.\r\nMaps to V_STOFNANIR.HEIMILISFANG.",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "Gets or sets the organization postal code.\r\nMaps to V_STOFNANIR.POSTNUMER.",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "description": "Gets or sets the organization start date.\r\nMaps to V_STOFNANIR.UPPHAFSDAGUR.",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "Gets or sets the organization end date.\r\nMaps to V_STOFNANIR.LOKADAGUR.",
            "format": "date-time",
            "nullable": true
          },
          "group": {
            "type": "string",
            "description": "Gets or sets the organization group. (A1, A2, A3, B, C)\r\nMaps to V_STOFNANIR.FLOKKUN_STOFNUNAR.",
            "nullable": true
          },
          "isOrganization": {
            "type": "integer",
            "description": "Gets or sets the isOrganization. Tells if the organization is an organization/institution (1) or a project (0).\r\nInstitutions pay salary to employees, projects do not.\r\nMaps to V_STOFNANIR.HR_STOFNUN.",
            "format": "int32",
            "nullable": true
          },
          "numberOfActiveJobs": {
            "type": "integer",
            "description": "Gets or sets the number of active jobs.\r\nMaps to V_STOFNANIR_FJOLDI_STARFSMANNA.fjoldiStarfa.",
            "format": "int32",
            "nullable": true
          },
          "numberOfActiveEmployees": {
            "type": "integer",
            "description": "Gets or sets the number of active employees.\r\nMaps to V_STOFNANIR_FJOLDI_STARFSMANNA.fjoldiVirkraStarfsmanna.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a data transfer object for an organization response.\r\nData is mapped from two different views in the database.\r\nV_STOFNANIR and V_STOFNANIR_FJOLDI_STARFSMANNA."
      },
      "OrganizationUnitResponseDto": {
        "type": "object",
        "properties": {
          "organizationName": {
            "type": "string",
            "description": "Gets or sets the organization name (stofnun).\r\nMaps to V_SKIPULAGSEININGAR.LysingStofnunar_HRStofnanir.",
            "nullable": true
          },
          "organizationCode": {
            "type": "string",
            "description": "Gets or sets the organization code (stofnun).\r\nMaps to V_SKIPULAGSEININGAR.SkammstofunStofnunar_HRStofnanir.",
            "nullable": true
          },
          "organizationNumber": {
            "type": "string",
            "description": "Gets or sets the organization number (fj√°rlagan√∫mer stofnunar).\r\nMaps to V_SKIPULAGSEININGAR.NumerStofnunar_GlStofnanir.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the organization unit name.\r\nMaps to V_SKIPULAGSEININGAR.Name.",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "Gets or sets the organization unit number (fj√°rlagan√∫mer stofnana einingar).\r\nMaps to V_SKIPULAGSEININGAR.OrganizationID.",
            "format": "int64",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Gets or sets the organization unit type.\r\nMaps to V_SKIPULAGSEININGAR.Type.",
            "nullable": true
          },
          "costSegment1": {
            "type": "string",
            "description": "Gets or sets the organization unit cost segment 1.\r\nMaps to V_SKIPULAGSEININGAR.Kostnadarstadur_Segment1.",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "Gets or sets the organization unit address.\r\nMaps to V_SKIPULAGSEININGAR.AddressLine1.",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "Gets or sets the organization unit postal code.\r\nMaps to V_SKIPULAGSEININGAR.PostalCode.",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Gets or sets the organization unit start date.\r\nMaps to V_SKIPULAGSEININGAR.DateFrom.",
            "format": "date-time",
            "nullable": true
          },
          "dateTo": {
            "type": "string",
            "description": "Gets or sets the organization unit end date.\r\nMaps to V_SKIPULAGSEININGAR.DateTo.",
            "format": "date-time",
            "nullable": true
          },
          "numberOfActiveJobs": {
            "type": "integer",
            "description": "Gets or sets the number of active jobs in the organization unit.\r\nMaps to V_SKIPULAGSEININGAR.fjoldiStarfa.",
            "format": "int32",
            "nullable": true
          },
          "numberOfActiveEmployees": {
            "type": "integer",
            "description": "Gets or sets the number of active employees in the organization unit.\r\nMaps to V_SKIPULAGSEININGAR.fjoldiVirkraEinstaklinga.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a response DTO for an organization unit."
      },
      "PageInfo": {
        "type": "object",
        "properties": {
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether there is a previous page.",
            "nullable": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether there is a next page."
          },
          "startCursor": {
            "type": "string",
            "description": "Gets or sets the cursor pointing to the start of the current page.",
            "nullable": true
          },
          "endCursor": {
            "type": "string",
            "description": "Gets or sets the cursor pointing to the end of the current page.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains pagination information for cursor-based pagination."
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "nullable": true },
          "title": { "type": "string", "nullable": true },
          "status": { "type": "integer", "format": "int32", "nullable": true },
          "detail": { "type": "string", "nullable": true },
          "instance": { "type": "string", "nullable": true }
        },
        "additionalProperties": false
      },
      "ResultExcelImport": {
        "type": "object",
        "properties": {
          "importGroupId": {
            "type": "string",
            "description": "Gets or sets the import group ID.",
            "format": "uuid"
          },
          "totalImported": {
            "type": "integer",
            "description": "Gets or sets the total number of records imported.",
            "format": "int32"
          },
          "successfullyImported": {
            "type": "integer",
            "description": "Gets or sets the number of records successfully imported.",
            "format": "int32"
          },
          "notImported": {
            "type": "integer",
            "description": "Gets or sets the number of records that were not imported.",
            "format": "int32"
          },
          "error": {
            "type": "string",
            "description": "Gets or sets the error message, if any, occurred during the import.",
            "nullable": true
          },
          "validationResults": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LineValidationResult" },
            "description": "Gets or sets the list of line validation results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Result class for excel import."
      },
      "SalaryTypeResponseDto": {
        "type": "object",
        "properties": {
          "elementTypeID": {
            "type": "integer",
            "description": "Gets or sets the ElementTypeID.\r\nMaps to ELEMENT_TYPE_ID.",
            "format": "int32",
            "nullable": true
          },
          "elementName": {
            "type": "string",
            "description": "Gets or sets the ElementName.\r\nMaps to ELEMENT_NAME.",
            "nullable": true
          },
          "primaryClassification": {
            "type": "string",
            "description": "Gets or sets the PrimaryClassification.\r\nMaps to PRIMARY_CLASSIFICATION.",
            "nullable": true
          },
          "processingType": {
            "type": "string",
            "description": "Gets or sets the ProcessingType.\r\nMaps to PROCESSING_TYPE.",
            "nullable": true
          },
          "typeNumber": {
            "type": "string",
            "description": "Gets or sets the TypeNumber.\r\nMaps to TEGUND_NR.",
            "nullable": true
          },
          "rateType": {
            "type": "string",
            "description": "Gets or sets the RateType.\r\nMaps to TAXTATEGUND.",
            "nullable": true
          },
          "secondaryClassificationNo": {
            "type": "string",
            "description": "Gets or sets the SecondaryClassificationNo.\r\nMaps to SECOUNDARY_CLASSIFICATION_NO.",
            "nullable": true
          },
          "secondaryClassificationName": {
            "type": "string",
            "description": "Gets or sets the SecondaryClassificationName.\r\nMaps to SECOUNDARY_CLASSIFICATION_NAME.",
            "nullable": true
          },
          "jobClassification": {
            "type": "string",
            "description": "Gets or sets the JobClassification.\r\nMaps to FLOKKUN_STAR.",
            "nullable": true
          },
          "jobNameClassification": {
            "type": "string",
            "description": "Gets or sets the JobNameClassification.\r\nMaps to FLOKKUN_STAR_HEITI.",
            "nullable": true
          },
          "paySlipNumber": {
            "type": "string",
            "description": "Gets or sets the PaySlipNumber.\r\nMaps to LAUNAMIDI_NR.",
            "nullable": true
          },
          "paySlipName": {
            "type": "string",
            "description": "Gets or sets the PaySlipName.\r\nMaps to LAUNAMIDI_HEITI.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the SalaryTypeResponseDto."
      },
      "TimeRegistrationImport": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "description": "Unique identifier for an import group (all lines in a single import document should have the same groupId)",
            "format": "uuid"
          },
          "importGroup": { "$ref": "#/components/schemas/ImportGroup" },
          "status": { "$ref": "#/components/schemas/ImportStatus" },
          "errorDescription": {
            "maxLength": 1024,
            "type": "string",
            "description": "Error description if status is Error",
            "nullable": true
          },
          "nationalId": {
            "maxLength": 128,
            "type": "string",
            "description": "Kennitala",
            "nullable": true
          },
          "employeeId": {
            "maxLength": 128,
            "type": "string",
            "description": "Starfsnumer",
            "nullable": true
          },
          "salaryTypeId": {
            "maxLength": 128,
            "type": "string",
            "description": "Launalidur",
            "nullable": true
          },
          "units": {
            "type": "number",
            "description": "Einingar - Either units or an amount for payment dependingg on the type",
            "format": "double",
            "nullable": true
          },
          "totalAmount": {
            "type": "number",
            "description": "Heildarupphaed - Total amount that should be deducted, only used with deduction types",
            "format": "double",
            "nullable": true
          },
          "fixedAmount": {
            "type": "number",
            "description": "FostAfborgun",
            "format": "double",
            "nullable": true
          },
          "assignmentId": {
            "maxLength": 128,
            "type": "string",
            "description": "Samningsnumer",
            "nullable": true
          },
          "salaryGroup": {
            "maxLength": 128,
            "type": "string",
            "description": "Launaflokkur",
            "nullable": true
          },
          "salaryStep": {
            "maxLength": 128,
            "type": "string",
            "description": "Threp",
            "nullable": true
          },
          "vacationFlag": {
            "maxLength": 128,
            "type": "string",
            "description": "Orlofsrofi",
            "nullable": true
          },
          "deduction": {
            "type": "string",
            "description": "Minus",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Dags fra",
            "format": "date-time",
            "nullable": true
          },
          "dateTo": {
            "type": "string",
            "description": "Dags til",
            "format": "date-time",
            "nullable": true
          },
          "organizationCostId": {
            "maxLength": 1024,
            "type": "string",
            "description": "Kostnadarstadur",
            "nullable": true
          },
          "signal": {
            "maxLength": 128,
            "type": "string",
            "description": "Merki",
            "nullable": true
          },
          "description": {
            "maxLength": 1024,
            "type": "string",
            "description": "¬¥Skyring",
            "nullable": true
          },
          "fi": {
            "maxLength": 128,
            "type": "string",
            "description": "F.I.",
            "nullable": true
          },
          "organizationCode": {
            "maxLength": 128,
            "type": "string",
            "description": "Skammstofun stofnun (SkSt)",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "description": "Creation date",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "Updated date",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "Who created",
            "nullable": true
          },
          "updatedBy": {
            "type": "string",
            "description": "Who updated",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data class for time registration import"
      },
      "AddTimeRegistrationsDto": {
        "type": "object",
        "properties": {
          "timeRegistrations": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TimeRegistrationDto" }
          }
        },
        "additionalProperties": false,
        "description": "Add time registrations dto"
      },
      "TimeRegistrationImportDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the time registration",
            "format": "uuid",
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "description": "Import group id",
            "format": "uuid"
          },
          "status": { "$ref": "#/components/schemas/ImportStatus" },
          "errorDescription": {
            "type": "string",
            "description": "Error description if status is Error",
            "nullable": true
          },
          "nationalId": {
            "type": "string",
            "description": "Kennitala",
            "nullable": true
          },
          "employeeId": {
            "type": "string",
            "description": "Starfsnumer",
            "nullable": true
          },
          "salaryTypeId": {
            "type": "string",
            "description": "Launalidur",
            "nullable": true
          },
          "units": {
            "type": "number",
            "description": "Einingar - Either units or an amount for payment dependingg on the type",
            "format": "double",
            "nullable": true
          },
          "totalAmount": {
            "type": "number",
            "description": "Heildarupphaed - Total amount that should be deducted, only used with deduction types",
            "format": "double",
            "nullable": true
          },
          "fixedAmount": {
            "type": "number",
            "description": "FostAfborgun",
            "format": "double",
            "nullable": true
          },
          "assignmentId": {
            "type": "string",
            "description": "Samningsnumer",
            "nullable": true
          },
          "salaryGroup": {
            "type": "string",
            "description": "Launaflokkur",
            "nullable": true
          },
          "salaryStep": {
            "type": "string",
            "description": "Threp",
            "nullable": true
          },
          "vacationFlag": {
            "type": "string",
            "description": "Orlofsrofi",
            "nullable": true
          },
          "deduction": {
            "type": "string",
            "description": "Minus",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Dags fra",
            "format": "date-time",
            "nullable": true
          },
          "dateTo": {
            "type": "string",
            "description": "Dags til",
            "format": "date-time",
            "nullable": true
          },
          "organizationCostId": {
            "type": "string",
            "description": "Kostnadarstadur",
            "nullable": true
          },
          "signal": {
            "type": "string",
            "description": "Merki",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "¬¥Skyring",
            "nullable": true
          },
          "fi": { "type": "string", "description": "F.I.", "nullable": true },
          "organizationCode": {
            "type": "string",
            "description": "Skammstofun stofnun (SkSt)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "TimeRegistrationImport Dto"
      },
      "UpdateVacancyDto": {
        "type": "object",
        "properties": {
          "vacancyID": {
            "type": "string",
            "description": "Gets or sets the vacancy_id.\r\nMaps to vacancy.vacancy_id_pk.",
            "nullable": true
          },
          "heading": {
            "type": "string",
            "description": "Gets or sets the heading.\r\nMaps to vacancy.fyrirsogn",
            "nullable": true
          },
          "jobTitle": {
            "type": "string",
            "description": "Gets or sets the job title.\r\nMaps to vacancy.starfsheiti",
            "nullable": true
          },
          "publishDate": {
            "type": "string",
            "description": "Gets or sets the date of publishing which also serves as the start of the application period.\r\nMaps to vacancy.birtingardagsetning.",
            "format": "date-time",
            "nullable": true
          },
          "openTo": {
            "type": "string",
            "description": "Gets or sets the end of the application period.\r\nMaps to vacancy.umsoknarfrestur_til.",
            "format": "date-time",
            "nullable": true
          },
          "introduction": {
            "type": "string",
            "description": "Gets or sets the introduction.\r\nMaps to vacancy.inngangur.",
            "nullable": true
          },
          "assignments": {
            "type": "string",
            "description": "Gets or sets the assignments.\r\nMaps to vacancy.verkefni.",
            "nullable": true
          },
          "qualifications": {
            "type": "string",
            "description": "Gets or sets the qualifications.\r\nMaps to vacancy.haefnikrofur",
            "nullable": true
          },
          "moreInfo": {
            "type": "string",
            "description": "Gets or sets the qualifications.\r\nMaps to vacancy.undirtexti",
            "nullable": true
          },
          "orgName": {
            "type": "string",
            "description": "Gets or sets the organization name.\r\nMaps to vacancy.STOFNUN_HEITI.",
            "nullable": true
          },
          "orgNr": {
            "type": "integer",
            "description": "Gets or sets the organization number (fj√°rlagali√∞ur).\r\nMaps to vacancy.fjarlagalidur.",
            "format": "int32",
            "nullable": true
          },
          "department": {
            "type": "string",
            "description": "Gets or sets the department.\r\nMaps to vacancy.skipulagseining.",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "Gets or sets the address.\r\nMaps to vacancy.heimilisfang.",
            "nullable": true
          },
          "postCode": {
            "type": "integer",
            "description": "Gets or sets the postal code.\r\nMaps to vacancy.postfang.",
            "format": "int32",
            "nullable": true
          },
          "contact1Name": {
            "type": "string",
            "description": "Gets or sets the name of contact 1.\r\nMaps to vacancy.tengilidur_1_nafn.",
            "nullable": true
          },
          "contact1JobTitle": {
            "type": "string",
            "description": "Gets or sets the job title of contact 1.\r\nMaps to vacancy.tengilidur_1_starfsheiti.",
            "nullable": true
          },
          "contact1EmailAddress": {
            "type": "string",
            "description": "Gets or sets the email address of contact 1.\r\nMaps to vacancy.tengilidur_1_netfang.",
            "nullable": true
          },
          "contact1PhoneNumber": {
            "type": "string",
            "description": "Gets or sets the phone number of contact 1.\r\nMaps to vacancy.tengilidur_1_simanumer.",
            "nullable": true
          },
          "contact2Name": {
            "type": "string",
            "description": "Gets or sets the name of contact 2.\r\nMaps to vacancy.tengilidur_2_nafn.",
            "nullable": true
          },
          "contact2JobTitle": {
            "type": "string",
            "description": "Gets or sets the job title of contact 2.\r\nMaps to vacancy.tengilidur_2_starfsheiti.",
            "nullable": true
          },
          "contact2EmailAddress": {
            "type": "string",
            "description": "Gets or sets the email address of contact 2.\r\nMaps to vacancy.tengilidur_2_netfang.",
            "nullable": true
          },
          "contact2PhoneNumber": {
            "type": "string",
            "description": "Gets or sets the phone number of contact 2.\r\nMaps to vacancy.tengilidur_2_simanumer.",
            "nullable": true
          },
          "webLinkUrl": {
            "type": "string",
            "description": "Gets or sets the weblink URL to the application website.\r\nMaps to vacancy.hlekkur_url.",
            "nullable": true
          },
          "webLinkText": {
            "type": "string",
            "description": "Gets or sets the weblink text to the application website.\r\nMaps to vacancy.hlekkur_texti.",
            "nullable": true
          },
          "hoursRatio": {
            "type": "string",
            "description": "Gets or sets the hours ratio.\r\nMaps to vacancy.starfshlutfall.",
            "nullable": true
          },
          "unionName": {
            "type": "string",
            "description": "Gets or sets the union name.\r\nMaps to vacancy.stettarfelag_heiti.",
            "nullable": true
          },
          "logoUrl": {
            "type": "string",
            "description": "Gets or sets the logoURL.\r\nMaps to vacancy.logo_url.",
            "nullable": true
          },
          "locations": {
            "type": "string",
            "description": "Gets or sets the locations.\r\nMaps to vacancy.stadsetningar.",
            "nullable": true
          },
          "numberOfPositions": {
            "type": "integer",
            "description": "Gets or sets the number of positions associated with the vacancy.\r\nMaps to vacancy.fjoldi_starfa.",
            "format": "int32",
            "nullable": true
          },
          "vacancyActive": {
            "type": "boolean",
            "description": "Gets or sets whether the vacancy is active.\r\nMaps to vacancy.auglysing_virk.",
            "nullable": true
          },
          "updatedBy": {
            "type": "string",
            "description": "Gets or sets the user that created the vacancy.\r\nMaps to vacancy.updated_by.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a data transfer object for a vacancy update.\r\nData is mapped from the vacancy table in the database."
      },
      "VacancyResponseDto": {
        "type": "object",
        "properties": {
          "vacancyID": {
            "type": "string",
            "description": "Gets or sets the vacancy_id.\r\nMaps to vacancy.vacancy_id.",
            "nullable": true
          },
          "heading": {
            "type": "string",
            "description": "Gets or sets the heading.\r\nMaps to vacancy.fyrirsogn",
            "nullable": true
          },
          "jobTitle": {
            "type": "string",
            "description": "Gets or sets the job title.\r\nMaps to vacancy.starfsheiti",
            "nullable": true
          },
          "publishDate": {
            "type": "string",
            "description": "Gets or sets the date of publishing which also serves as the start of the application period.\r\nMaps to vacancy.birtingardagsetning.",
            "format": "date-time",
            "nullable": true
          },
          "openTo": {
            "type": "string",
            "description": "Gets or sets the end of the application period.\r\nMaps to vacancy.umsoknarfrestur_til.",
            "format": "date-time",
            "nullable": true
          },
          "introduction": {
            "type": "string",
            "description": "Gets or sets the introduction.\r\nMaps to vacancy.inngangur.",
            "nullable": true
          },
          "assignments": {
            "type": "string",
            "description": "Gets or sets the assignments.\r\nMaps to vacancy.verkefni.",
            "nullable": true
          },
          "qualifications": {
            "type": "string",
            "description": "Gets or sets the qualifications.\r\nMaps to vacancy.haefnikrofur",
            "nullable": true
          },
          "moreInfo": {
            "type": "string",
            "description": "Gets or sets the qualifications.\r\nMaps to vacancy.undirtexti",
            "nullable": true
          },
          "orgName": {
            "type": "string",
            "description": "Gets or sets the organization name.\r\nMaps to vacancy.STOFNUN_HEITI.",
            "nullable": true
          },
          "orgNr": {
            "type": "integer",
            "description": "Gets or sets the organization number (fj√°rlagali√∞ur).\r\nMaps to vacancy.fjarlagalidur.",
            "format": "int32",
            "nullable": true
          },
          "department": {
            "type": "string",
            "description": "Gets or sets the department.\r\nMaps to vacancy.skipulagseining.",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "Gets or sets the address.\r\nMaps to vacancy.heimilisfang.",
            "nullable": true
          },
          "postCode": {
            "type": "integer",
            "description": "Gets or sets the postal code.\r\nMaps to vacancy.postfang.",
            "format": "int32",
            "nullable": true
          },
          "contact1Name": {
            "type": "string",
            "description": "Gets or sets the name of contact 1.\r\nMaps to vacancy.tengilidur_1_nafn.",
            "nullable": true
          },
          "contact1JobTitle": {
            "type": "string",
            "description": "Gets or sets the job title of contact 1.\r\nMaps to vacancy.tengilidur_1_starfsheiti.",
            "nullable": true
          },
          "contact1EmailAddress": {
            "type": "string",
            "description": "Gets or sets the email address of contact 1.\r\nMaps to vacancy.tengilidur_1_netfang.",
            "nullable": true
          },
          "contact1PhoneNumber": {
            "type": "string",
            "description": "Gets or sets the phone number of contact 1.\r\nMaps to vacancy.tengilidur_1_simanumer.",
            "nullable": true
          },
          "contact2Name": {
            "type": "string",
            "description": "Gets or sets the name of contact 2.\r\nMaps to vacancy.tengilidur_2_nafn.",
            "nullable": true
          },
          "contact2JobTitle": {
            "type": "string",
            "description": "Gets or sets the job title of contact 2.\r\nMaps to vacancy.tengilidur_2_starfsheiti.",
            "nullable": true
          },
          "contact2EmailAddress": {
            "type": "string",
            "description": "Gets or sets the email address of contact 2.\r\nMaps to vacancy.tengilidur_2_netfang.",
            "nullable": true
          },
          "contact2PhoneNumber": {
            "type": "string",
            "description": "Gets or sets the phone number of contact 2.\r\nMaps to vacancy.tengilidur_2_simanumer.",
            "nullable": true
          },
          "webLinkUrl": {
            "type": "string",
            "description": "Gets or sets the weblink URL to the application website.\r\nMaps to vacancy.hlekkur_url.",
            "nullable": true
          },
          "webLinkText": {
            "type": "string",
            "description": "Gets or sets the weblink text to the application website.\r\nMaps to vacancy.hlekkur_texti.",
            "nullable": true
          },
          "hoursRatio": {
            "type": "string",
            "description": "Gets or sets the hours ratio.\r\nMaps to vacancy.starfshlutfall.",
            "nullable": true
          },
          "unionName": {
            "type": "string",
            "description": "Gets or sets the union name.\r\nMaps to vacancy.stettarfelag_heiti.",
            "nullable": true
          },
          "logoUrl": {
            "type": "string",
            "description": "Gets or sets the logoURL.\r\nMaps to vacancy.logo_url.",
            "nullable": true
          },
          "locations": {
            "type": "string",
            "description": "Gets or sets the locations.\r\nMaps to vacancy.stadsetningar.",
            "nullable": true
          },
          "numberOfPositions": {
            "type": "integer",
            "description": "Gets or sets the number of positions associated with the vacancy.\r\nMaps to vacancy.fjoldi_starfa.",
            "format": "int32",
            "nullable": true
          },
          "vacancyActive": {
            "type": "boolean",
            "description": "Gets or sets whether the vacancy is active.\r\nMaps to vacancy.auglysing_virk.",
            "nullable": true
          },
          "creationDate": {
            "type": "string",
            "description": "Gets or sets the date of when the vacancy was created.\r\nMaps to vacancy.creation_date.",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "description": "Gets or sets the user that created the vacancy.\r\nMaps to vacancy.created_by.",
            "nullable": true
          },
          "updatedDate": {
            "type": "string",
            "description": "Gets or sets the date of when the vacancy was updated.\r\nMaps to vacancy.updated_date.",
            "format": "date-time",
            "nullable": true
          },
          "updatedBy": {
            "type": "string",
            "description": "Gets or sets the user that updated the vacancy.\r\nMaps to vacancy.updated_by.",
            "nullable": true
          },
          "sourceSystem": {
            "type": "string",
            "description": "Gets or sets the system that created the vacancy.\r\nMaps to VACANCY.SOURCE_SYSTEM.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a data transfer object for a vacancy response.\r\nData is mapped from the vacancy table in the database."
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "Enter: Bearer {JWT token}.",
        "name": "Authorization",
        "in": "header"
      },
      "ExecuteAsUsername": {
        "type": "apiKey",
        "description": "Enter: Username base64 encoded token.",
        "name": "X-ExecuteAsUsername",
        "in": "header"
      },
      "ExecuteAsPassword": {
        "type": "apiKey",
        "description": "Enter: Password base64 encoded token.",
        "name": "X-ExecuteAsPassword",
        "in": "header"
      }
    }
  },
  "security": [
    { "Bearer": [] },
    { "ExecuteAsUsername": [] },
    { "ExecuteAsPassword": [] }
  ],
  "tags": [
    {
      "name": "Account",
      "description": "Account controller, fetch data from Orri. Used for account verification."
    },
    {
      "name": "Employee",
      "description": "Employee controller, fetch data from Orri. Used to get information about an employee and lookup a group of employees."
    },
    {
      "name": "OpenInvoices",
      "description": "Open Invoices controller, used to get information about open invoices."
    },
    {
      "name": "Organization",
      "description": "Organization controller, used to get information about an organization and lookup a group of organizations.\r\nOrganization is equivalent to Stofnun in Icelandic."
    },
    {
      "name": "OrganizationEmployee",
      "description": "Organization Employee controller, used to get information about employees in organization or organization unit.\r\nThis controller fetches data from FJS database."
    },
    {
      "name": "OrganizationUnit",
      "description": "Organization unit controller, used to get information about an organization unit and lookup a group of organization units.\r\nOrganization unit is equivalent to Stofnunareining/Deild in Icelandic."
    },
    {
      "name": "TimeRegistration",
      "description": "Time registration controller, used to register time for employees and send the time registrations to Orri.\r\nThis controller interacts with both FJS databases and Orri."
    },
    {
      "name": "Vacancy",
      "description": "Vacancy controller, used to get information about a vacancy and lookup a group of vacancies.\r\nVacancy is equivalent to Laust Starf in Icelandic."
    },
    {
      "name": "ElfurBase",
      "description": "Base controller for elfur, all other controllers should inherit it."
    }
  ]
}
